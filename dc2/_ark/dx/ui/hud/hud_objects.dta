#define REST_NAME
("Rest.move")
(PanelDir
   (types
      (hud
         (editor
            (cur_hud
               object
               (class RndDir)
               (obj_flags allow_null)
               (help
                  "Currently selected hud"))
            (move
               symbol
               (list
                  {do
                     ($dir
                        {{milo cur_dir}
                           find
                           moves
                           FALSE})
                     ($list
                        {array 0})
                     {push_back $list ''}
                     {if
                        $dir
                        {$dir
                           iterate
                           HamMove
                           $move
                           {push_back
                              $list
                              {symbol
                                 {$move name}}}}}
                     $list})
               (interp_handlers update_move)
               (propanim_safetoadd update_move_keys)
               (help
                  "current move changed by the song.anim"))
            (toggle_speed
               script
               (script
                  {if
                     midi_player
                     {midi_player set active TRUE}}
                  {$this
                     set_slow
                     {!
                        [slow_speed]}
                     TRUE}
                  {$this add_all_barks})
               (help
                  "Tests the speed animation"))
            (toggle_barking
               script
               (script
                  {if
                     {&& action_bark_player master}
                     {do
                        ($was_active
                           {action_bark_player get active})
                        {action_bark_player set_active FALSE}
                        {if
                           {! $was_active}
                           {$this add_all_barks}
                           {action_bark_player set_active TRUE}}}}))
            (refresh_barks
               script
               (script
                  {$this add_all_barks}))
            (refresh_lang
               script
               (script
                  {do
                     ($banks
                        {array 0})
                     ($song_bank
                        "")
                     {if
                        {&&
                           $hamdirector
                           {$hamdirector get_world}}
                        {set
                           $song_bank
                           {find_obj
                              {$hamdirector get_world}
                              moves
                              barks}}}
                     {if
                        {exists master_barks_bank}
                        {push_back $banks master_barks_bank}}
                     {if
                        $song_bank
                        {push_back $banks $song_bank}}
                     {foreach
                        $bank
                        $banks
                        {$bank
                           iterate
                           SynthSample
                           $sfx
                           {foreach
                              $lang
                              TURBO_SUPPORTED_LANGUAGES
                              {if
                                 {!=
                                    $lang
                                    {system_language}}
                                 {do
                                    ($lang_path
                                       {sprint
                                          "/"
                                          $lang
                                          "/"})
                                    ($new_path
                                       "")
                                    {if
                                       {search_replace
                                          {$sfx get file}
                                          $lang_path
                                          {sprint
                                             "/"
                                             {system_language}
                                             "/"}
                                          $new_path}
                                       {$sfx set file $new_path}}}}}}}
                     {$this add_all_barks}}))
            (freestyle_movement
               float
               (range 0 1)))
         (cur_hud
            "")
         (move '')
         (cur_move_index -1)
         (loop_start 0)
         (loop_end 0)
         (moves_dir
            "")
         (slow_speed FALSE)
         (freestyle_movement 0)
         (last_narrated_seq
            "")
         (added_freestyle_beat -1)
         (force_longest_sfx FALSE)
         (player_huds
            ())
         (rest_move_name
            "Rest.move")
         (enter DX_NO_MENU_MOTIONBLUR
            {set $hud_panel $this}
            {set
               [cur_move_index]
               -1}
            {do
               ($ham_world
                  {if_else
                     $hamdirector
                     {$hamdirector get_world}
                     ""})
               {if
                  $ham_world
                  {set
                     [moves_dir]
                     {$ham_world find moves FALSE}}
                  {$ham_world
                     add_sink
                     $this
                     (skills_review move_perfect move_awesome move_ok move_bad)}}}
            {if
               [moves_dir]
               {[moves_dir]
                  iterate
                  HamMove
                  $move
                  {if
                     {==
                        {tolower
                           {$move name}}
                        "rest.move"}
                     {set
                        [rest_move_name]
                        {$move name}}}}}
            {set
               [move]
               [rest_move_name]}
            {if
               {exists master}
               {master
                  add_sink
                  $this
                  (downbeat beat halfbeat quarterbeat first_beat)}}
            {if
               {==
                  [cur_hud]
                  ""}
               {set
                  [cur_hud]
                  {$this
                     find
                     "hud_right"
                     FALSE}}}
            {resize
               [player_huds]
               0}
            {push_back
               [player_huds]
               {$this
                  find
                  "hud_left"
                  FALSE}}
            {push_back
               [player_huds]
               {$this
                  find
                  "hud_right"
                  FALSE}}
            {if
               {exists move_sound_player}
               {move_sound_player init}}
            {if
               {&&
                  $edit_mode
                  {exists audio}}
               {audio set_track_volume multi -96}})
         (music_start
            {if
               {&&
                  $edit_mode
                  $hamdirector
                  {$hamdirector get_world}}
               {handle
                  ({$hamdirector get_world}
                     beat_animation_start)}}
            kDataUnhandled)
         (get_player_hud
            ($player_index)
            {do
               ($provider
                  {gamedata getp $player_index provider})
               ($hud
                  "")
               {if
                  $provider
                  {set
                     $hud
                     {elem
                        [player_huds]
                        {$provider get side}}}}
               $hud})
         (set_look_behind_result
            ($result)
            {do
               ($look_behind_beat
                  {'*'
                     {-
                        [cur_move_index]
                        1}
                     4})
               ($scrolling_flash_card
                  {[cur_hud]
                     find_flashcard
                     $look_behind_beat})
               ($scrolling_trig
                  {find_obj
                     $scrolling_flash_card
                     {sprint
                        $result
                        ".trig"}})
               ($skills_hud
                  {$this find dynamic_hud FALSE})
               ($skills_flash_card
                  {if_else
                     $skills_hud
                     {$skills_hud find_flashcard $look_behind_beat}
                     ""})
               ($skills_trig
                  {find_obj
                     $skills_flash_card
                     {sprint
                        $result
                        ".trig"}})
               {if
                  $scrolling_trig
                  {$scrolling_trig trigger}}
               {if
                  $skills_trig
                  {$skills_trig trigger}}})
         (move_perfect
            {$this set_look_behind_result move_perfect}
            kDataUnhandled)
         (move_awesome
            {$this set_look_behind_result move_awesome}
            kDataUnhandled)
         (move_ok
            {$this set_look_behind_result move_ok}
            kDataUnhandled)
         (move_bad
            {$this set_look_behind_result move_bad}
            kDataUnhandled)
         (music_end
            {if
               {&&
                  $edit_mode
                  $hamdirector
                  {$hamdirector get_world}}
               {handle
                  ({$hamdirector get_world}
                     beat_animation_stop)}}
            kDataUnhandled)
         (skills_review
            {if
               [cur_hud]
               {[cur_hud]
                  reset_beats}}
            kDataUnhandled)
         (set_score_multiplier
            ($mult)
            {if
               {!=
                  {game_panel get_type}
                  practice}
               {do
                  ($mult_anim
                     {find_obj
                        {game_panel get star_display}
                        multiplier_meter
                        set_multiplier.anim})
                  {if
                     $mult_anim
                     {$mult_anim set_frame $mult}}}})
         (set_miss_streak_pct
            ($val)
            {do
               ($meter
                  {$this find miss_streak.anim FALSE})
               {if
                  $meter
                  {$meter
                     animate
                     (dest
                        {'*'
                           $val
                           {$meter end_frame}})}}})
         (set_num_photos
            ($num)
            {do
               ($photo_fill
                  {find_obj $this photo_award_counter award_fill.anim})
               {$photo_fill
                  set_frame
                  {'*'
                     2
                     {'*' $num 480}}}})
         (set_gold_mulitplier_value
            ($mult)
            {foreach_int
               $i
               0
               {size
                  [player_huds]}
               {do
                  ($hud
                     {elem
                        [player_huds]
                        $i})
                  {foreach
                     $flash_card
                     {$hud get flash_cards}
                     {do
                        ($mult_lbl
                           {find_obj
                              $flash_card
                              "2x.lbl"})
                        {if
                           $mult_lbl
                           {$mult_lbl set_token_fmt multiplier_fmt $mult}}}}}})
         (reset_snapshots
            {ui reset_snapshots})
         (take_snapshot
            {if
               gesture_mgr
               {ui take_snapshot}})
         (show_snapshots
            ($visible $display_token)
            {do
               ($cycle_photos
                  {find_obj
                     $this
                     photo_display
                     {sprint
                        $display_token
                        ".anim"}})
               ($photo_show_anim
                  {find_obj $this display_photos.anim})
               {if
                  $cycle_photos
                  {$cycle_photos
                     animate
                     (loop
                        0
                        {$cycle_photos end_frame})}}
               {if
                  $photo_show_anim
                  {$photo_show_anim
                     animate
                     (dest
                        {if_else
                           $visible
                           {$photo_show_anim end_frame}
                           0})}}})
         (update_move_keys
            ($safe)
            {if
               {&&
                  $safe
                  $hamdirector
                  {$hamdirector get_world}}
               {foreach_int
                  $i
                  0
                  {'+' kDifficultyExpert 1}
                  {do
                     ($song_anim
                        {$hamdirector difficulty_song_anim $i})
                     ($frame_measure 0)
                     {$song_anim
                        foreach_keyframe
                        $hamdirector
                        (move)
                        $frame
                        $value
                        {set
                           $frame_measure
                           {/
                              {seconds_to_beat
                                 {/ $frame 30}}
                              4}}
                        {$song_anim
                           replace_frame
                           {'*'
                              30
                              {beat_to_seconds
                                 {'*'
                                    4
                                    {round $frame_measure}}}}}}}}})
         (get_move
            ($name)
            {if
               {&&
                  {!
                     [moves_dir]}
                  $hamdirector
                  {$hamdirector get_world}}
               {set
                  [moves_dir]
                  {{$hamdirector get_world}
                     find
                     moves}}}
            {if_else
               [moves_dir]
               {do
                  ($retVal)
                  {set
                     $retVal
                     {[moves_dir]
                        find
                        $name}}
                  {if
                     {&&
                        {! $retVal}
                        {!=
                           $name
                           [rest_move_name]}
                        {!=
                           $name
                           ""}}
                     {notify_once
                        "WARNING: No move called "
                        $name
                        ". Found in authoring."}}
                  $retVal}
               ""})
         (is_tagged_move
            ($player_index $move_index)
            {do
               ($provider
                  {gamedata getp $player_index provider})
               {find_elem
                  {$provider get tagged_moves}
                  $move_index}})
         (move_from_beat
            ($b $player_index)
            {do
               ($move)
               ($practice_start)
               ($practice_end)
               {cond
                  ({&&
                        {$hamdirector practice_beats $practice_start $practice_end}
                        {'||'
                           {<
                              {int $b}
                              {round $practice_start}}
                           {>=
                              {int $b}
                              {round $practice_end}}}}
                     {$this
                        get_move
                        [rest_move_name]})
                  ({&&
                        {>=
                           [added_freestyle_beat]
                           0}
                        {==
                           [added_freestyle_beat]
                           {round $b}}}
                     {$this
                        get_move
                        "Freestyle.move"})
                  ({&&
                        {exists master}
                        {$hamdirector get freestyle_enabled}
                        {>=
                           $b
                           {round
                              {master event_beat freestyle_start}}}
                        {<
                           $b
                           {round
                              {master event_beat freestyle_end}}}}
                     {if_else
                        {==
                           {int $b}
                           {round
                              {master event_beat freestyle_start}}}
                        {$this
                           get_move
                           "Freestyle.move"}
                        {$this
                           get_move
                           [rest_move_name]}})
                  (TRUE
                     {if
                        {==
                           {mod
                              {int $b}
                              4}
                           0}
                        {'+=' $b 1}}
                     {$this
                        get_move
                        {$hamdirector beat_to_movename $b $player_index}})}})
         (beat_from_move_index
            ($index)
            {if_else
               {&&
                  $hamdirector
                  {$hamdirector player_song_anim 0}}
               {seconds_to_beat
                  {/
                     {{$hamdirector player_song_anim 0}
                        frame_from_index
                        $hamdirector
                        (move)
                        $index}
                     30}}
               -1})
         (move_interp
            ($a $b $r)
            {if
               {&&
                  $hamdirector
                  {$hamdirector get_world}}
               {do
                  ($song_anim
                     {$hamdirector player_song_anim 0})
                  ($beat
                     {max
                        -1
                        {seconds_to_beat
                           {/
                              {$song_anim frame}
                              30}}})
                  ($cur_index
                     {int
                        {/ $beat 4}})
                  ($now
                     {$this move_from_beat $beat 0})
                  ($new_move FALSE)
                  ($in_play_range
                     {'||'
                        {!
                           {exists game_panel}}
                        {!=
                           dance_battle
                           {game_panel get_type}}
                        {game_panel in_play_range $beat}})
                  ($force_update_current_flashcard
                     {if_else $edit_mode TRUE FALSE})
                  {if
                     {&&
                        $in_play_range
                        {'||'
                           {!=
                              {if_else
                                 $now
                                 {$now name}
                                 ''}
                              [move]}
                           {!=
                              $cur_index
                              [cur_move_index]}}}
                     {set $new_move TRUE}
                     {if
                        $dump_scoring_stats
                        {print
                           "new move on timeline "
                           {$now name}
                           "\n"}}
                     {if
                        {exists move_sound_player}
                        {move_sound_player set_move $now $beat}}
                     {if
                        {'||'
                           {<
                              $cur_index
                              [cur_move_index]}
                           {==
                              {hamprovider get gameplay_mode}
                              practice}}
                        {set $force_update_current_flashcard TRUE}}
                     {set
                        [cur_move_index]
                        $cur_index}
                     {set
                        [move]
                        {if_else
                           $now
                           {$now name}
                           ''}}
                     {$this update_flashcards $beat $force_update_current_flashcard}}
                  {foreach_int
                     $player_index
                     0
                     2
                     {set
                        $hud
                        {$this get_player_hud $player_index}}
                     {if
                        {'||'
                           {! $new_move}
                           {<= $beat 0}
                           {==
                              {hamprovider get gameplay_mode}
                              practice}}
                        {$hud set_anim_frame $beat}}
                     {if
                        $new_move
                        {do
                           ($now_index -1)
                           ($index 0)
                           ($flash_card_count
                              {size
                                 {$hud
                                    get
                                    (flash_cards)}})
                           ($time_to_count_in TRUE)
                           ($cur_move
                              "")
                           {foreach
                              $flash_card
                              {$hud
                                 get
                                 (flash_cards)}
                              {do
                                 ($beat_anim
                                    {$flash_card get beat_anim})
                                 ($measure
                                    {round
                                       {/
                                          {$beat_anim frame}
                                          1920}})
                                 {if
                                    {== $measure 0}
                                    {set $now_index $index}}}
                              {'++' $index}}
                           {if
                              {>= $now_index 0}
                              {set
                                 $cur_move
                                 {{elem
                                       {$hud
                                          get
                                          (flash_cards)}
                                       $now_index}
                                    get
                                    cur_move}}}
                           {$this set_cur_move $player_index $cur_move}
                           {if
                              {!=
                                 {hamprovider get gameplay_mode}
                                 practice}
                              {foreach_int
                                 $i
                                 0
                                 3
                                 {do
                                    ($card_index
                                       {mod
                                          {'+' $i $now_index}
                                          $flash_card_count})
                                    ($card_move
                                       {{elem
                                             {$hud
                                                get
                                                (flash_cards)}
                                             $card_index}
                                          get
                                          cur_move})
                                    ($is_scored
                                       {&&
                                          $card_move
                                          {$card_move get scored}})
                                    {if
                                       {'||'
                                          {&&
                                             {< $i 2}
                                             $is_scored}
                                          {&&
                                             {== $i 2}
                                             {! $is_scored}}}
                                       {set $time_to_count_in FALSE}
                                       {set $i 2}}}}
                              {if
                                 $time_to_count_in
                                 {$hud do_count_in 0 TRUE}}}}}}
                  {if
                     {&&
                        $new_move
                        {exists game_panel}}
                     {handle
                        (hamprovider post_move_finished)}}}})
         (set_cur_move
            ($player_index $cur_move)
            {if
               {exists game}
               {if
                  {&& $dump_scoring_stats $cur_move}
                  {print
                     "setting move "
                     $cur_move
                     " for player "
                     $player_index
                     "\n"}}
               {game set_cur_move $player_index $cur_move}}
            {if
               {&&
                  $cur_move
                  {!
                     {$cur_move is_rest}}}
               {{$this get_player_hud $player_index}
                  do_now_effect}})
         (update_flashcards
            ($beat $force)
            {foreach_int
               $player_index
               0
               {gamedata max_players}
               {do
                  ($hud
                     {$this get_player_hud $player_index})
                  ($flash_card_count
                     {size
                        {$hud
                           get
                           (flash_cards)}})
                  ($num_look_aheads
                     {-
                        {-
                           $flash_card_count
                           {$hud get num_look_behinds}}
                        1})
                  ($flash_card_beat
                     {'+'
                        $beat
                        {'*' 4 $num_look_aheads}})
                  ($measure
                     {int
                        {/ $flash_card_beat 4}})
                  ($my_beat)
                  ($flash_card_measure)
                  ($flash_card)
                  ($i 0)
                  ($start_score_move_index
                     {{gamedata getp $player_index provider}
                        get
                        start_score_move_index})
                  {foreach
                     $flash_card
                     {$hud
                        get
                        (flash_cards)}
                     {set
                        $flash_card_measure
                        {'+'
                           $i
                           {'*'
                              $flash_card_count
                              {int
                                 {/
                                    {- $measure $i}
                                    $flash_card_count}}}}}
                     {set
                        $my_beat
                        {'*' 4 $flash_card_measure}}
                     {if
                        {&&
                           {exists game_panel}
                           {==
                              dance_battle
                              {game_panel get type}}}
                        {set
                           $my_beat
                           {game_panel convert_beat $my_beat $player_index}}}
                     {if
                        {&&
                           {!=
                              $my_beat
                              {$flash_card get beat}}
                           {'||'
                              {>= $flash_card_measure $start_score_move_index}
                              $force}}
                        {do
                           ($my_move
                              {$this move_from_beat $my_beat $player_index})
                           {$flash_card set beat $my_beat}
                           {$flash_card set_move $my_move $force}
                           {if
                              {&&
                                 $my_move
                                 {==
                                    Freestyle.move
                                    {$my_move name}}
                                 {> $my_beat $beat}}
                              {do
                                 ($freestyle_card
                                    {find_obj $hud freestyle_card})
                                 ($freestyle_reset
                                    {find_obj $hud setup_freestyle_card.anim})
                                 {if
                                    {&& $freestyle_card $freestyle_reset}
                                    {$freestyle_card set trans_parent $flash_card}
                                    {$freestyle_reset animate}
                                    {$freestyle_card
                                       iterate
                                       ParticleSys
                                       $part
                                       {$part clear_all_particles}}}}}
                           {$flash_card
                              set_tagged
                              {$this
                                 is_tagged_move
                                 $player_index
                                 {int
                                    {/ $my_beat 4}}}}}}
                     {'++' $i}}}})
         (reset
            {if
               [cur_hud]
               {[cur_hud]
                  reset}}
            {$this set_slow FALSE FALSE}
            {if
               {&&
                  $edit_mode
                  {exists active_events_parser}}
               {active_events_parser
                  add_sink
                  $this
                  ()
                  kSinkModeExportType}}
            {$this clear_flash_cards 0}
            {$this clear_flash_cards 1}
            {set
               [last_narrated_seq]
               ""}
            {set
               [added_freestyle_beat]
               -1})
         (set_score
            ($score $old_score $best_possible $player_idx))
         (set_review_result
            ($num $den)
            {do
               ($boombox_score
                  {if_else
                     $hamdirector
                     {find_obj
                        {$hamdirector get cur_world}
                        score
                        score_player_1.lbl}
                     ""})
               ($recap_restults
                  {find_obj $this text_recap})
               ($results_num
                  {find_obj $recap_restults numerator})
               ($results_den
                  {find_obj $recap_restults denominator})
               ($results_pct
                  {find_obj $recap_restults percentage})
               {if
                  $boombox_score
                  {$boombox_score set_token_fmt fraction $num $den}}
               {if
                  $results_num
                  {$results_num set_number $num}}
               {if
                  $results_den
                  {$results_den set_number $den}}
               {if
                  $results_pct
                  {$results_pct
                     set_number
                     {/
                        {'*' 100 $num}
                        $den}}}})
         (clear_flash_cards
            ($index)
            {$this
               iterate
               (RndDir 4beatscrolling)
               $cur_hud
               {if
                  {==
                     $index
                     {$cur_hud get player_index}}
                  {foreach
                     $flash_card
                     {$cur_hud
                        get
                        (flash_cards)}
                     {$flash_card set beat -1}
                     {$flash_card
                        set_move
                        ""
                        TRUE}}}})
         (get_seq
            ($seq)
            {if
               {!=
                  {type $seq}
                  kDataObject}
               {do
                  ($bank
                     {find_obj $this sound_bank})
                  ($name $seq)
                  {set
                     $seq
                     {find_obj
                        $bank
                        {sprint
                           $name
                           ".snd"}}}
                  {if
                     {! $seq}
                     {set
                        $seq
                        {find_obj
                           $bank
                           {sprint
                              $name
                              ".grp"}}}}}}
            $seq)
         (play
            ($seq)
            {set
               $seq
               {$this get_seq $seq}}
            {if_else
               $seq
               {do
                  {$seq play}
                  {if
                     {startswith
                        {$seq name}
                        "nar_"}
                     {set
                        [last_narrated_seq]
                        $seq}}}
               {notify
                  "could not play "
                  $seq}})
         (get_seq_length
            ($seq)
            {set
               $seq
               {$this get_seq $seq}}
            {if_else
               $seq
               {switch
                  {$seq class_name}
                  (Sound
                     {do
                        ($samp
                           {$seq get sample})
                        {if_else
                           $samp
                           {$samp sample_length}
                           0}})
                  (Group
                     {if_else
                        {==
                           {$seq get_type}
                           sound_group}
                        {$this
                           get_seq_length
                           {$seq next_sound}}
                        0})
                  (RandomGroupSeq
                     {if_else
                        {$seq
                           size
                           (children)}
                        {$this
                           get_seq_length
                           {$seq
                              get
                              (children
                                 {mod
                                    {$seq get_next_play_index}
                                    {$seq
                                       size
                                       (children)}})}}
                        0})
                  (Sfx
                     {do
                        ($length 0)
                        ($samp_length 0)
                        {foreach_int
                           $i
                           0
                           {$seq
                              size
                              (sfxmaps)}
                           {set
                              $samp_length
                              {{$seq
                                    get
                                    (sfxmaps $i sample)}
                                 sample_length}}
                           {if
                              {> $samp_length $length}
                              {set $length $samp_length}}}
                        $length})}
               0})
         (get_longest_seq
            ($seq)
            {set
               $seq
               {$this get_seq $seq}}
            {do
               ($children
                  {array 0})
               ($longest 0)
               ($child_length 0)
               {switch
                  {$seq class_name}
                  (Group
                     {if
                        {==
                           {$seq get_type}
                           sound_group}
                        {set
                           $children
                           {$seq get_array objects}}})
                  (RandomGroupSeq
                     {set
                        $children
                        {$seq get_array children}})}
               {foreach
                  $child
                  $children
                  {set
                     $child_length
                     {$this get_seq_length $child}}
                  {if
                     {> $child_length $longest}
                     {set $seq $child}
                     {set $longest $child_length}}}}
            $seq)
         (pick_shorter_seq
            ($seq $highest_length)
            {set
               $seq
               {$this get_seq $seq}}
            {do
               ($legal
                  {array 0})
               ($children
                  {array 0})
               ($longest 0)
               ($child_length)
               ($longest_legal)
               ($index 0)
               {switch
                  {$seq class_name}
                  (Group
                     {if
                        {==
                           {$seq get_type}
                           sound_group}
                        {set
                           $children
                           {$seq get_array objects}}})
                  (RandomGroupSeq
                     {set
                        $children
                        {$seq get_array children}})}
               {foreach
                  $child
                  $children
                  {set
                     $child_length
                     {$this get_seq_length $child}}
                  {if
                     {<= $child_length $highest_length}
                     {push_back $legal $index}
                     {if
                        {> $child_length $longest}
                        {set $longest_legal $index}
                        {set $longest $child_length}}}
                  {'++' $index}}
               {if
                  {size $legal}
                  {if_else
                     [force_longest_sfx]
                     {$seq force_next_play_index $longest_legal}
                     {$seq
                        force_next_play_index
                        {elem
                           $legal
                           {random_int
                              0
                              {size $legal}}}}}}})
         (stop_narrator
            {if
               [last_narrated_seq]
               {[last_narrated_seq]
                  stop}
               {set
                  [last_narrated_seq]
                  ""}})
         (set_slow
            ($slow $fade)
            {set
               [slow_speed]
               $slow}
            {do
               ($fade_anim
                  {sound_bank find skills_cross_fade.anim FALSE})
               ($dest_frame
                  {if_else
                     {&& $fade_anim $slow}
                     {$fade_anim end_frame}
                     0})
               {if_else
                  $fade
                  {$fade_anim
                     animate
                     (dest $dest_frame)}
                  {$fade_anim
                     animate
                     (range $dest_frame $dest_frame)}}}
            {if
               {&&
                  $hamdirector
                  {$hamdirector get_world}}
               {handle
                  ({$hamdirector get_world}
                     {if_else
                        [slow_speed]
                        skills_slowdown_start
                        skills_slowdown_stop})}})
         (feedback_instruction
            ($text)
            {instructional_message.lbl set text_token $text}
            {instructional_message.anim animate})
         (add_all_barks
            {if
               {&&
                  {exists action_bark_player}
                  {exists master}}
               {do
                  ($last_beat
                     {seconds_to_beat
                        {/
                           {master song_duration_ms}
                           1000}})
                  ($i 0)
                  {action_bark_player clear_events}
                  {while
                     {< $i $last_beat}
                     {if_else
                        [slow_speed]
                        {action_bark_player
                           add_barks
                           {$this move_from_beat $i 0}
                           (verb_slow)
                           $i}
                        {action_bark_player
                           add_barks
                           {$this move_from_beat $i 0}
                           (verb)
                           $i}}
                     {'+=' $i 4}}}}))
      (shell
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use when this panel is on screen"))
            (refresh_postproc
               script
               (script
                  {$this update_postproc})
               (help
                  "Refresh postprocessor selection on the tool")))
         (postprocess '')
         (enter DX_NO_MENU_MOTIONBLUR
            {$this update_postproc})
         (exit_complete
            {rnd reset_postproc})
         (update_postproc
            {if_else
               [postprocess]
               {[postprocess]
                  select}
               {rnd reset_postproc}}))
      (shell_in_game
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use when this panel is on screen"))
            (refresh_postproc
               script
               (script
                  {$this
                     override_postproc
                     [postprocess]})
               (help
                  "Refresh postprocessor selection on the tool")))
         (flow_commands broadcast_winning_crew)
         (postprocess '')
         (enter DX_NO_MENU_MOTIONBLUR
            {$this
               override_postproc
               [postprocess]})
         (override_postproc
            ($pp)
            {rnd set_postproc_override $pp})
         (exit_complete
            {$this override_postproc ''})
         (broadcast_winning_crew
            {do
               ($score0
                  {{gamedata getp 0 provider}
                     get
                     score})
               ($score1
                  {{gamedata getp 1 provider}
                     get
                     score})
               {if
                  {!= $score0 $score1}
                  {do
                     ($winner
                        {if_else
                           {> $score0 $score1}
                           0
                           1})
                     {handle
                        (hamprovider
                           nar_play_crew_vo
                           win
                           {gamedata getp $winner crew})}}}}))))
(RndDir
   (types
      (4beatscrolling
         (measure_anim
            "")
         (flash_cards
            ())
         (flash_card_animations
            ())
         (num_look_behinds 1)
         (right_justify TRUE proxy_save)
         (player_index 0 proxy_save)
         (editor
            (player_index
               int
               (range
                  0
                  {-
                     {gamedata max_players}
                     1})
               (help
                  "Player index"))
            (measure_anim
               object
               (class Anim)
               (help
                  "Animation to use on the measure"))
            (flash_cards
               (array
                  object
                  (class RndDir move_display))
               (help
                  "Sequence of the flashcards starting with the lookbehind"))
            (flash_card_animations
               (array
                  object
                  (class PropAnim))
               (help
                  "Sequence of the PropAnims which animate flashcards through the UI"))
            (num_look_behinds
               int
               (range 0 5)
               (help
                  "How many of the flashcards in the list are 'look behinds'?"))
            (right_justify
               bool
               (post_sync
                  {$this
                     set_justify
                     [right_justify]})
               (help
                  "Screen justification")))
         (reset)
         (enter DX_NO_MENU_MOTIONBLUR
            {$this
               set_justify
               [right_justify]})
         (set_justify
            ($right)
            {do
               ($justify_anim
                  {find_obj $this flip.anim})
               {set
                  [right_justify]
                  $right}
               {if
                  $justify_anim
                  {$justify_anim
                     set_frame
                     {if_else $right 0 1}}}
               {$this
                  clear
                  (flash_card_animations)}
               {foreach
                  $flash_card
                  [flash_cards]
                  {$flash_card
                     set
                     player_index
                     [player_index]}
                  {$flash_card set_justify $right}}})
         (do_now_effect
            {do
               ($effect
                  {find_obj $this now_sparkles.anim})
               {if
                  $effect
                  {$effect animate}}})
         (do_count_in
            ($start_frame $broadcast_provider)
            {do
               ($provider
                  {gamedata
                     getp
                     [player_index]
                     provider})
               ($anim
                  {find_obj $this count_in.anim})
               {if
                  $broadcast_provider
                  {handle
                     ($provider count_in)}}
               {if
                  $anim
                  {$anim
                     animate
                     (range
                        $start_frame
                        {$anim end_frame})}}})
         (counting_in
            {do
               ($anim
                  {find_obj $this count_in.anim})
               {if_else
                  $anim
                  {$anim is_animating}
                  FALSE}})
         (count_in_frame
            {do
               ($anim
                  {find_obj $this count_in.anim})
               {if_else
                  $anim
                  {$anim frame}
                  0}})
         (set_anim_frame
            ($beat)
            {if
               [measure_anim]
               {do
                  ($frame
                     {'*' $beat 480})
                  ($anim_length
                     {[measure_anim]
                        end_frame})
                  {if
                     {!= $anim_length 0}
                     {set
                        $frame
                        {-
                           $frame
                           {'*'
                              $anim_length
                              {int
                                 {/ $frame $anim_length}}}}}}
                  {[measure_anim]
                     set_frame
                     $frame}}})
         (reset_beats
            {foreach
               $elem
               [flash_cards]
               {$elem reset}})
         (find_flashcard
            ($beat)
            {do
               ($found
                  "")
               {foreach
                  $flash_card
                  [flash_cards]
                  {if
                     {==
                        $beat
                        {$flash_card get beat}}
                     {set $found $flash_card}}}
               $found}))
      (fitness
         (player 0)
         (editor
            (player
               int
               (help
                  "Which player?"))))
      (move_display
         (beat_anim
            "")
         (cur_move
            "")
         (tagged FALSE)
         (beat -10)
         (active FALSE)
         (beat_frame 0)
         (right_justify TRUE)
         (max_display_length 0 proxy_save)
         (use_small_tex FALSE)
         (value 0)
         (scored FALSE)
         (color_index 0)
         (practice_choose_card FALSE)
         (flow_commands update_flashcard_color update_flashcard_move)
         (editor
            (reset
               script
               (script
                  {$this reset}))
            (tagged
               bool
               (help
                  "Tells us if this move is tagged for photo opportunity")
               (post_sync
                  {$this
                     set_tagged
                     [tagged]}))
            (active
               bool
               (post_sync
                  {$this
                     activate
                     [active]})
               (help
                  "Test for activation of the flashcard"))
            (max_display_length
               float
               (help
                  "Maximum length to change justification so not to clip with edge of screen"))
            (beat_anim
               object
               (class Anim)
               (help
                  "Animation to play along with the beat"))
            (beat_frame
               float
               (interp_handlers set_beat_frame)
               (help
                  "Frame of animation for the beat animation"))
            (use_small_tex
               bool
               (interp_handlers set_use_small_tex)
               (help
                  "Use the small texture \\"
                  '_sm.tex\\"'
                  'instead."'))
            (right_justify
               bool
               (help
                  "Right justify the hud")
               (post_sync
                  {$this
                     set_justify
                     [right_justify]}))
            (color_index
               int
               (help
                  "Which color index to use")
               (range 0 1))
            (practice_choose_card
               bool
               (help
                  "If this card is for practice_choose_panel")))
         (reset
            {$this move_to $this FALSE}
            {set
               [beat]
               -10})
         (set_use_small_tex
            ($value)
            {set
               [use_small_tex]
               $value}
            {if
               {!=
                  [cur_move]
                  ""}
               {icon.mat
                  set
                  diffuse_tex
                  {[cur_move]
                     get
                     {if_else
                        [use_small_tex]
                        small_tex
                        tex}}}})
         (set_beat_frame
            ($a $b $r)
            {if
               [beat_anim]
               {[beat_anim]
                  set_frame
                  {'*'
                     {'*' 4 480}
                     {'+'
                        $a
                        {'*'
                           $r
                           {- $b $a}}}}}})
         (set_justify
            ($right)
            {do
               ($justify_anim
                  {find_obj $this flip.anim})
               {set
                  [right_justify]
                  $right}
               {if
                  $justify_anim
                  {$justify_anim
                     set_frame
                     {if_else $right 0 1}}}})
         (set_move
            ($move $force_update)
            {set
               [cur_move]
               $move}
            {if
               $force_update
               {$this update_flashcard_move}})
         (update_flashcard_move
            {do
               ($skip FALSE)
               {if
                  {&&
                     $edit_mode
                     {exists milo}
                     {'||'
                        {==
                           {milo cur_dir}
                           $this}
                        {==
                           {milo cur_dir}
                           {$this dir}}}}
                  {set $skip TRUE}}
               {if
                  {! $skip}
                  {if_else
                     {!=
                        [cur_move]
                        ""}
                     {do
                        ($justify_anim
                           {find_obj $this text_flip.anim})
                        ($tex
                           {[cur_move]
                              get
                              {if_else
                                 [use_small_tex]
                                 small_tex
                                 tex}})
                        {icon.mat set diffuse_tex $tex}
                        {icon_state.anim
                           set_frame
                           {[cur_move]
                              get
                              tex_state}}
                        {if
                           {&&
                              $edit_mode
                              {!=
                                 {move_name.lbl get edit_text}
                                 ""}}
                           {move_name.lbl
                              set
                              edit_text
                              ""}}
                        {paradiddle.anim
                           set_frame
                           {[cur_move]
                              get
                              paradiddle}}
                        {move_name.lbl
                           set_move_name
                           [cur_move]}
                        {if
                           {&&
                              $justify_anim
                              {>
                                 [max_display_length]
                                 0}}
                           {if_else
                              [right_justify]
                              {$justify_anim
                                 set_frame
                                 {if_else
                                    {<=
                                       {move_name.lbl draw_rect_width}
                                       [max_display_length]}
                                    0
                                    1}}
                              {$justify_anim
                                 set_frame
                                 {if_else
                                    {<=
                                       {move_name.lbl draw_rect_width}
                                       [max_display_length]}
                                    1
                                    0}}}}
                        {icon.grp
                           set_showing
                           {!=
                              $tex
                              ""}}}
                     {do
                        ($icon_state
                           {$this find icon_state.anim FALSE})
                        {icon.mat
                           set
                           diffuse_tex
                           ""}
                        {move_name.lbl
                           set_move_name
                           ""}
                        {paradiddle.anim set_frame 0}
                        {if
                           $icon_state
                           {$icon_state set_frame kTexNone}}
                        {icon.grp set_showing FALSE}}}}})
         (set_tagged
            ($val)
            {set
               [tagged]
               $val}
            {$this update_flashcard_color})
         (update_flashcard_color
            {do
               ($anim
                  {find_obj $this player_color.anim})
               {if
                  $anim
                  {$anim
                     set_frame
                     {cond
                        ([tagged]
                           2)
                        (TRUE
                           [color_index])}}}})
         (activate
            ($active)
            {do
               ($active_anim
                  {find_obj $this activate.anim})
               ($active_award
                  {find_obj $this current_award})
               ($persistent_award
                  {find_obj $this persistent_award})
               ($persistent_hide
                  {find_obj $this hide_persistent.anim})
               ($end_frame 0)
               ($anim_time 0)
               {if
                  $active_anim
                  {set
                     $end_frame
                     {$active_anim end_frame}}
                  {set
                     $anim_time
                     {/ $end_frame 30}}
                  {$active_anim
                     animate
                     (dest
                        {if_else $active $end_frame 0})}}
               {if
                  {! $active}
                  {$this move_to $this TRUE}}
               {if
                  $active
                  {if
                     $active_award
                     {$active_award set_showing TRUE}}}})
         (set_award
            ($award $play $persistent)
            {do
               ($award_display
                  {$this
                     find
                     {if_else $persistent persistent_award current_award}})
               ($award_select_anim
                  {$award_display find setup.anim FALSE})
               ($effect_anim
                  {find_obj $award_display effect.anim})
               {$award_display set_showing TRUE}
               {if
                  $award_select_anim
                  {$award_select_anim set_frame $award}}
               {if
                  $effect_anim
                  {if_else
                     $play
                     {$effect_anim animate}
                     {$effect_anim
                        set_frame
                        {$effect_anim end_frame}}}}})
         (get_award
            ($persistent)
            {do
               ($award_display
                  {$this
                     find
                     {if_else $persistent persistent_award current_award}})
               ($award_select_anim
                  {$award_display find setup.anim FALSE})
               {$award_select_anim get frame}})
         (retract_award
            {do
               ($effect_anim
                  {find_obj $this current_award effect.anim})
               {if
                  $effect_anim
                  {$effect_anim
                     animate
                     (dest 0)}}})
         (replay_effect
            {do
               ($anim
                  "")
               {if_else
                  {!=
                     {$this get_award FALSE}
                     kSkillsAward_Unplayed}
                  {set
                     $anim
                     {find_obj $this current_award effect.anim}}
                  {set
                     $anim
                     {find_obj $this persistent_award effect.anim}}}
               {if
                  {&&
                     $anim
                     {>
                        {$anim frame}
                        0}}
                  {$anim animate}}})
         (move_to
            ($location_trans $animate)
            {if
               {&&
                  {$this exists move_to.anim}
                  {$this exists flash_card.grp}}
               {do
                  ($end
                     {move_to.anim end_frame})
                  {flash_card.grp set_trans_parent $location_trans TRUE}
                  {move_to.anim stop_animation}
                  {if_else
                     {! $animate}
                     {do
                        {flash_card.grp set_local_rot_mat 1 0 0 0 1 0 0 0 1}
                        {flash_card.grp set_local_pos 0 0 0}}
                     {do
                        {move_to.anim
                           set_key
                           flash_card.grp
                           (scale)
                           0}
                        {move_to.anim
                           set_key
                           flash_card.grp
                           (rotation)
                           0}
                        {move_to.anim
                           set_key
                           flash_card.grp
                           (position)
                           0}
                        {if_else
                           {== $location_trans $this}
                           {do
                              {move_to.anim
                                 set_key_val
                                 flash_card.grp
                                 (scale)
                                 480
                                 (1 1 1)
                                 TRUE}
                              {move_to.anim
                                 set_key_val
                                 flash_card.grp
                                 (rotation)
                                 480
                                 (0 0 0 1)
                                 TRUE}
                              {move_to.anim
                                 set_key_val
                                 flash_card.grp
                                 (position)
                                 480
                                 (0 0 0)
                                 TRUE}}
                           {do
                              {move_to.anim
                                 set_key
                                 flash_card.grp
                                 (scale)
                                 480}
                              {move_to.anim
                                 set_key
                                 flash_card.grp
                                 (rotation)
                                 480}
                              {move_to.anim
                                 set_key
                                 flash_card.grp
                                 (position)
                                 480}}}
                        {move_to.anim animate}}}}})
         (set_num_links
            ($count)
            {if
               {$this exists link_bracket.anim}
               {link_bracket.anim set_frame $count}})
         (set_value
            ($value)
            {do
               ($value_label
                  {find_obj $this value.lbl})
               ($new_move
                  {find_obj $this new_move.flow})
               {set
                  [value]
                  $value}
               {set
                  [scored]
                  FALSE}
               {if
                  $value_label
                  {$value_label
                     set_int
                     [value]}}
               {if
                  $new_move
                  {$new_move activate}}})
         (value_achieved
            {do
               ($award
                  {find_obj $this award.flow})
               {set
                  [scored]
                  TRUE}
               {if
                  $award
                  {$award activate}}}))
      (multiplier_meter
         (editor
            (channel1_anim
               object
               (class Anim)
               (help
                  "animation to set_frame channel1 from narrator audio"))
            (channel2_anim
               object
               (class Anim)
               (help
                  "animation to set_frame channel2 from narrator audio"))
            (average_anim
               object
               (class Anim)
               (help
                  "animation to set_frame average of channel1 and channel2"))
            (multiply_anim
               object
               (class Anim)
               (help
                  "animation to set_frame multiplication of channel1 and channel2")))
         (channel1_anim
            "")
         (channel2_anim
            "")
         (average_anim
            "")
         (multiply_anim
            "")
         (high_water_mark 0)
         (channel_data
            ($ch1 $ch2)
            {set
               [high_water_mark]
               {max
                  [high_water_mark]
                  {max $ch1 $ch2}}}
            {if
               {>
                  [high_water_mark]
                  0}
               {/=
                  $ch1
                  {'*'
                     1.5
                     [high_water_mark]}}
               {/=
                  $ch2
                  {'*'
                     1.5
                     [high_water_mark]}}}
            {if
               [channel1_anim]
               {[channel1_anim]
                  set_frame
                  $ch1}}
            {if
               [channel2_anim]
               {[channel2_anim]
                  set_frame
                  $ch2}}
            {if
               [average_anim]
               {[average_anim]
                  set_frame
                  {/
                     {'+' $ch1 $ch2}
                     2}}}
            {if
               [multiply_anim]
               {[multiply_anim]
                  set_frame
                  {'*' $ch1 $ch2}}})
         (enter DX_NO_MENU_MOTIONBLUR
            {if
               {&&
                  $hamdirector
                  {$hamdirector get_world}}
               {do
                  ($fx
                     {find_obj
                        {$hamdirector get_world}
                        hud
                        sound_bank
                        narrator_monitor.effmon})
                  {$fx
                     add_sink
                     $this
                     (channel_data)}}}
            {$this channel_data 0 0}))
      (score_star_display
         (editor
            (stars
               (array
                  object
                  (class RndDir))
               (help
                  "Stars in the list"))
            (cur_star
               int
               (range
                  0
                  {'+'
                     {size
                        [stars]}
                     1})
               (help
                  "Current selected star for testing"))
            (star_progress
               float
               (range 0 1)
               (post_sync
                  {$this
                     set_star_progress
                     [cur_star]
                     [star_progress]})
               (help
                  "Star progress for testing"))
            (star_complete
               script
               (script
                  {$this
                     set_star_complete
                     [cur_star]}))
            (reset
               script
               (script
                  {$this reset})))
         (stars
            ())
         (cur_star 0)
         (star_progress 0)
         (set_star_progress
            ($index $progress)
            {if
               {<
                  $index
                  {size
                     [stars]}}
               {do
                  ($anim
                     {{elem
                           [stars]
                           $index}
                        find
                        "score.anim"
                        FALSE})
                  {if
                     $anim
                     {$anim
                        set_frame
                        {'*'
                           $progress
                           {$anim end_frame}}}}}})
         (set_star_complete
            ($index)
            {if
               {<
                  $index
                  {size
                     [stars]}}
               {do
                  ($anim
                     {{elem
                           [stars]
                           $index}
                        find
                        "award.anim"
                        FALSE})
                  {if
                     $anim
                     {$anim animate}}
                  {$this set_star_progress $index 1}}}))
      (skills_timeline
         (editor
            (flash_cards
               (array
                  object
                  (class RndDir))
               (help
                  "All the flash cards we have to use"))
            (num_moves
               int
               (range
                  0
                  {size
                     [flash_cards]})
               (post_sync
                  {$this
                     set_num_moves
                     [num_moves]}))
            (deactivate
               script
               (script
                  {$this deactivate}))
            (introduce_1
               script
               (script
                  {$this test_introduce 1}))
            (introduce_2
               script
               (script
                  {$this test_introduce 2}))
            (introduce_3
               script
               (script
                  {$this test_introduce 3}))
            (introduce_4
               script
               (script
                  {$this test_introduce 4})))
         (flash_cards
            ())
         (num_moves 1)
         (flow_commands deactivate)
         (set_num_moves
            ($num_moves)
            {do
               ($setup_anim
                  {$this find setup.anim FALSE})
               {set
                  [num_moves]
                  $num_moves}
               {if
                  $setup_anim
                  {$setup_anim
                     set_frame
                     [num_moves]}}
               {foreach_int
                  $i
                  0
                  {size
                     [flash_cards]}
                  {{elem
                        [flash_cards]
                        $i}
                     set_showing
                     {<
                        $i
                        [num_moves]}}}})
         (clear_moves
            {foreach
               $flashcard
               [flash_cards]
               {$flashcard reset}}
            {$this set_num_moves 0}
            {$this deactivate})
         (add_move
            ($move $beat)
            {if
               {&&
                  $move
                  {<
                     [num_moves]
                     {-
                        {size
                           [flash_cards]}
                        1}}}
               {do
                  ($flash_card
                     {elem
                        [flash_cards]
                        [num_moves]})
                  {$flash_card set_move $move TRUE}
                  {$flash_card set beat $beat}
                  {$this
                     set_num_moves
                     {'+'
                        [num_moves]
                        1}}}})
         (deactivate
            {$this show_tick_meter FALSE 0}
            {do
               ($active_group
                  {$this find active.grp FALSE})
               ($inactive_group
                  {$this find main.grp FALSE})
               {foreach
                  $flashcard
                  [flash_cards]
                  {$flashcard activate FALSE}
                  {if
                     {&& $active_group $inactive_group}
                     {$active_group remove_object $flashcard}
                     {$inactive_group add_object $flashcard}}}})
         (find_flashcard
            ($beat)
            {do
               ($found
                  "")
               {foreach_int
                  $i
                  0
                  [num_moves]
                  {do
                     ($flash_card
                        {elem
                           [flash_cards]
                           $i})
                     {if
                        {==
                           $beat
                           {$flash_card get beat}}
                        {set $found $flash_card}}}}
               $found})
         (set_active
            ($beat $activate)
            {do
               ($flash_card
                  {$this find_flashcard $beat})
               {if
                  $flash_card
                  {$flash_card activate $activate}}})
         (award
            ($index)
            {do
               ($tick_anim
                  {find_obj
                     $this
                     skillz_gate_meter
                     {sprint
                        "tick_"
                        $index
                        "_fire.anim"}})
               {if
                  $tick_anim
                  {$tick_anim animate}}})
         (set_move_award
            ($beat $award $play $persistent)
            {do
               ($flash_card
                  {$this find_flashcard $beat})
               {if
                  $flash_card
                  {$flash_card set_award $award $play $persistent}
                  {$flash_card
                     set_award
                     kSkillsAward_Unplayed
                     FALSE
                     {! $persistent}}}})
         (transfer_award_to_persistent
            ($beat)
            {do
               ($flash_card
                  {$this find_flashcard $beat})
               {if
                  $flash_card
                  {do
                     ($award
                        {$flash_card get_award FALSE})
                     {if
                        {!= $award kSkillsAward_Unplayed}
                        {$flash_card set_award $award FALSE TRUE}
                        {$flash_card set_award kSkillsAward_Unplayed FALSE FALSE}}}}})
         (retract_move_award
            ($beat)
            {do
               ($flash_card
                  {$this find_flashcard $beat})
               {if
                  $flash_card
                  {$flash_card retract_award}}})
         (highlight_flashcard
            ($beat)
            {do
               ($highlight
                  {find_obj
                     {$this find_flashcard $beat}
                     highlight_result.anim})
               {if
                  $highlight
                  {$highlight animate}}})
         (highlight_awards
            {foreach
               $flash_card
               [flash_cards]
               {$flash_card replay_effect}})
         (introduce
            ($flashcard_beat $index $total)
            {do
               ($flash_card
                  {$this find_flashcard $flashcard_beat})
               ($trans
                  {$this
                     find
                     {sprint
                        "introduce_"
                        $total
                        "_move_"
                        {'+' $index 1}
                        ".trans"}
                     FALSE})
               ($active_group
                  {$this find active.grp FALSE})
               ($inactive_group
                  {$this find main.grp FALSE})
               {if
                  {&& $flash_card $trans}
                  {$flash_card move_to $trans TRUE}
                  {if
                     {&& $active_group $inactive_group}
                     {$active_group add_object $flash_card}
                     {$inactive_group remove_object $flash_card}}}
               {$this reset_ticks}})
         (show_tick_meter
            ($show $beat_delay)
            {do
               ($anim
                  {find_obj $this show_meter.anim})
               {if
                  $anim
                  {if
                     {&&
                        $beat_delay
                        {!
                           {$anim is_animating}}}
                     {$anim
                        set_frame
                        {if_else
                           {>=
                              {$anim frame}
                              {/
                                 {$anim end_frame}
                                 2}}
                           {'+'
                              {$anim end_frame}
                              {'*' $beat_delay 480}}
                           {-
                              0
                              {'*' $beat_delay 480}}}}}
                  {$anim
                     animate
                     (dest
                        {if_else
                           $show
                           {$anim end_frame}
                           0})}}})
         (reset_ticks
            {do
               ($reset_ticks
                  {find_obj $this skillz_gate_meter reset.flow})
               {if
                  $reset_ticks
                  {$reset_ticks activate}}})
         (test_introduce
            ($count)
            {foreach_int
               $i
               0
               $count
               {do
                  ($flash_card
                     {elem
                        [flash_cards]
                        $i})
                  ($trans
                     {$this
                        find
                        {sprint
                           "introduce_"
                           $count
                           "_move_"
                           {'+' $i 1}
                           ".trans"}
                        FALSE})
                  {if
                     $trans
                     {$flash_card move_to $trans TRUE}}
                  {$flash_card activate TRUE}}}))
      (numbers_3D
         (editor
            (alignment
               int
               (list
                  ("kMiddleRight"
                     "kMiddleLeft"))
               (post_sync
                  {$this set_alignment_anim})
               (refresh alignment_anim)))
         (alignment_anim
            "")
         (alignment kMiddleRight proxy_save)
         (enter DX_NO_MENU_MOTIONBLUR
            {$this set_alignment_anim})
         (set_number
            ($num)
            {if
               [alignment_anim]
               {[alignment_anim]
                  set_frame
                  $num}})
         (set_alignment_anim
            {set
               [alignment_anim]
               {find_obj
                  $this
                  {switch
                     [alignment]
                     (kMiddleRight
                        "right_justify.anim")
                     (kMiddleLeft
                        "left_justify.anim")}}}
            {$this set_number 100}))
      (player_hud_component
         (player_index 0 proxy_save)
         (side kSkeletonRight proxy_save)
         (editor
            (player_index
               int
               (help
                  "player index to give feedback for (0 or 1)")
               (range
                  0
                  {-
                     {gamedata max_players}
                     1}))
            (side
               int
               (help
                  "side of the screen")
               (list
                  ("kSkeletonLeft"
                     "kSkeletonRight")))))
      (point_chase_hud
         (point_curve 0.0)
         (editor
            (point_curve
               float
               (range 0 1))))
      (point_chase_column
         (move
            "")
         (move_start -1)
         (last_measure -1)
         (value 0)
         (gold FALSE)
         (completed
            (FALSE FALSE))
         (editor
            (gold bool))
         (init
            ($last_measure)
            {set
               [last_measure]
               $last_measure}
            {$this
               update_feedback
               (0 0)}
            {set
               [gold]
               FALSE}
            {do
               ($mult_lbl
                  {find_obj $this goldtext.lbl})
               {if
                  $mult_lbl
                  {$mult_lbl set_token_fmt multiplier_fmt 2}}}
            {set
               [completed]
               {array 0}}
            {foreach_int
               $i
               0
               {gamedata max_players}
               {push_back
                  [completed]
                  FALSE}})
         (update_feedback
            ($results)
            {foreach_int
               $i
               0
               {size $results}
               {do
                  ($provider
                     {gamedata getp $i provider})
                  ($bar_anim_name
                     {switch
                        {$provider get side}
                        (kSkeletonRight
                           "bar_right.anim")
                        (kSkeletonLeft
                           "bar_left.anim")
                        ""})
                  ($bar_anim
                     {find_obj $this $bar_anim_name})
                  {if
                     $bar_anim
                     {$bar_anim
                        set_frame
                        {elem $results $i}}}}})
         (win
            ($player)
            {do
               ($win_flow
                  {find_obj
                     $this
                     {sprint
                        "win_"
                        $player
                        ".flow"}})
               {set_elem
                  [completed]
                  $player
                  TRUE}
               {if
                  $win_flow
                  {$win_flow activate}}})
         (send_next_card
            ($move)
            {do
               ($send_flow
                  {find_obj
                     $this
                     "send_card.flow"})
               ($stop
                  {find_obj
                     $this
                     "stop.flow"})
               {set
                  [move]
                  $move}
               {$this setup_static_flashcard}
               {if_else
                  [move]
                  {if
                     $send_flow
                     {$send_flow activate}}
                  {if
                     $stop
                     {$stop activate}}}})
         (setup_static_flashcard
            {if
               [move]
               {do
                  ($tex
                     {[move]
                        get
                        tex})
                  {icon.mat set diffuse_tex $tex}
                  {icon_state.anim
                     set_frame
                     {[move]
                        get
                        tex_state}}
                  {if
                     {&&
                        $edit_mode
                        {!=
                           {move_name.lbl get edit_text}
                           ""}}
                     {move_name.lbl
                        set
                        edit_text
                        ""}}
                  {paradiddle.anim
                     set_frame
                     {[move]
                        get
                        paradiddle}}
                  {move_name.lbl
                     set_move_name
                     [move]}}})
         (update
            ($measure_offset)
            {if
               {>
                  $measure_offset
                  [last_measure]}
               {set
                  [move]
                  ""}}
            {if
               {&&
                  [move]
                  {==
                     $measure_offset
                     {-
                        [move_start]
                        2}}}
               {$this
                  send_next_card
                  [move]}}
            {if
               {&&
                  [move]
                  {==
                     $measure_offset
                     {-
                        [move_start]
                        1}}}
               {do
                  ($song_anim
                     {$hamdirector difficulty_song_anim kDifficultyExpert})
                  ($frame_beat 0)
                  ($iconman
                     {find_obj
                        $this
                        "iconman.iconman"})
                  ($done FALSE)
                  {$song_anim
                     foreach_keyframe
                     $hamdirector
                     (move)
                     $frame
                     $value
                     {if
                        {&&
                           {! $done}
                           {==
                              {[move]
                                 get
                                 name}
                              $value}
                           $iconman}
                        {set
                           $frame_beat
                           {seconds_to_beat
                              {/ $frame 30}}}
                        {$iconman set start_beat $frame_beat}
                        {$iconman
                           set
                           end_beat
                           {'+' $frame_beat 4}}
                        {set $done TRUE}}}}}
            {if
               {!
                  [move]}
               {do
                  ($stop
                     {find_obj
                        $this
                        "stop.flow"})
                  {if
                     $stop
                     {$stop activate}}}})
         (set_value
            ($value)
            {set
               [value]
               $value}
            {do
               ($value_lbl
                  {find_obj
                     $this
                     "value.lbl"})
               {if
                  $value_lbl
                  {$value_lbl
                     set_int
                     [value]
                     TRUE}}}))
      #include practice_options.dta))
(Object
   (types
      (music_speed_controller
         (speed 1.0)
         (editor
            (speed
               float
               (range 0 1.0)
               (interp_handlers update_speed)
               (help
                  "Animates the song speed")))
         (update_speed
            ($a $b $r)
            {if
               {exists audio}
               {audio
                  set
                  speed
                  {'+'
                     $a
                     {'*'
                        $r
                        {- $b $a}}}}}))
      (minimarcos_anim_parameters
         (period 1.0)
         (num_beats 4.0)
         (offset_time 0.375)
         (editor
            (period float)
            (num_beats float)
            (offset_time float)))))