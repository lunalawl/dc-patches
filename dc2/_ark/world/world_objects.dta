#include ../config/macros.dta
#define LIGHTING_CATEGORIES
((bright silhouette))
#define CAMSHOT_CATEGORIES
((#include camera_cats.dta))
#include worldbase.dta
(CamShot
   (allowed_dirs PanelDir)
   (init
      {$this set_type ham}
      {set
         [category]
         TEST_CAM})
   (editor
      (category
         symbol
         (list CAMSHOT_CATEGORIES)
         (help
            "Category of the shot")))
   (types
      (ham
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use for this shot")))
         (postprocess
            {object
               ""})
         (start_shot
            {if_else
               $hamdirector
               {$hamdirector
                  set
                  cam_postproc
                  [postprocess]}
               {if
                  [postprocess]
                  {[postprocess]
                     select}}})
         (stop_shot
            {if
               $hamdirector
               {$hamdirector
                  set
                  cam_postproc
                  {object
                     ""}}
               {if
                  [postprocess]
                  {[postprocess]
                     unselect}}}))))
(LightPreset
   (init
      {$this set category bright})
   (editor
      (category
         symbol
         (list LIGHTING_CATEGORIES)
         (help
            "Category of the preset")))
   (views
      (flags
         ("category"
            [category])
         ("platform_only"
            [platform_only])))
   (types
      (target_animator
         (editor
            (backlight
               object
               (class RndDir)
               (help
                  "backlight object to animate"))
            (backlight_event
               symbol
               (list
                  {do
                     ($array
                        {array 0})
                     {push_back $array none}
                     {if
                        [backlight]
                        {[backlight]
                           iterate
                           EventTrigger
                           $obj
                           {push_back
                              $array
                              {symbol
                                 {$obj name}}}}}
                     {sort $array}
                     $array})
               (help
                  "event trigger to fire for this keyframe"))
            (target_1
               (indent
                  (target1
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base1_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base1_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base1_speed
                     float
                     (help
                        "speed multiplier"))
                  (base1_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add1_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add1_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add1_speed
                     float
                     (help
                        "speed multiplier"))
                  (add1_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_2
               (indent
                  (target2
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base2_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base2_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base2_speed
                     float
                     (help
                        "speed multiplier"))
                  (base2_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add2_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add2_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add2_speed
                     float
                     (help
                        "speed multiplier"))
                  (add2_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_3
               (indent
                  (target3
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base3_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base3_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base3_speed
                     float
                     (help
                        "speed multiplier"))
                  (base3_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add3_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add3_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add3_speed
                     float
                     (help
                        "speed multiplier"))
                  (add3_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_4
               (indent
                  (target4
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base4_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base4_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base4_speed
                     float
                     (help
                        "speed multiplier"))
                  (base4_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add4_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add4_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add4_speed
                     float
                     (help
                        "speed multiplier"))
                  (add4_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_5
               (indent
                  (target5
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base5_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base5_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base5_speed
                     float
                     (help
                        "speed multiplier"))
                  (base5_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add5_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add5_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add5_speed
                     float
                     (help
                        "speed multiplier"))
                  (add5_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_6
               (indent
                  (target6
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base6_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base6_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base6_speed
                     float
                     (help
                        "speed multiplier"))
                  (base6_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add6_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add6_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add6_speed
                     float
                     (help
                        "speed multiplier"))
                  (add6_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (test
               script
               (script
                  {$this start_anim})))
         (backlight
            {object ''})
         (backlight_event none)
         (target1
            {object ''})
         (base1_anim still)
         (base1_amplitude 1)
         (base1_speed 1)
         (base1_phase 0)
         (add1_anim still)
         (add1_amplitude 1)
         (add1_speed 1)
         (add1_phase 0)
         (target2
            {object ''})
         (base2_anim still)
         (base2_amplitude 1)
         (base2_speed 1)
         (base2_phase 0)
         (add2_anim still)
         (add2_amplitude 1)
         (add2_speed 1)
         (add2_phase 0)
         (target3
            {object ''})
         (base3_anim still)
         (base3_amplitude 1)
         (base3_speed 1)
         (base3_phase 0)
         (add3_anim still)
         (add3_amplitude 1)
         (add3_speed 1)
         (add3_phase 0)
         (target4
            {object ''})
         (base4_anim still)
         (base4_amplitude 1)
         (base4_speed 1)
         (base4_phase 0)
         (add4_anim still)
         (add4_amplitude 1)
         (add4_speed 1)
         (add4_phase 0)
         (target5
            {object ''})
         (base5_anim still)
         (base5_amplitude 1)
         (base5_speed 1)
         (base5_phase 0)
         (add5_anim still)
         (add5_amplitude 1)
         (add5_speed 1)
         (add5_phase 0)
         (target6
            {object ''})
         (base6_anim still)
         (base6_amplitude 1)
         (base6_speed 1)
         (base6_phase 0)
         (add6_anim still)
         (add6_amplitude 1)
         (add6_speed 1)
         (add6_phase 0)
         (get_clip_names
            {if_else
               [target1]
               {[target1]
                  get_clip_names}
               (still)})
         (enter DX_NO_MENU_MOTIONBLUR
            {if
               [backlight]
               {if
                  {!=
                     [backlight_event]
                     none}
                  {unless
                     {[backlight]
                        exists
                        [backlight_event]}
                     {set
                        [backlight_event]
                        none}
                     {notify
                        "invalid backlight event on "
                        {$this name}
                        ", clearing!"}}}})
         (start_anim
            {if
               {&&
                  [backlight]
                  {!=
                     [backlight_event]
                     none}}
               {[backlight]
                  trigger
                  [backlight_event]}}
            {if
               [target1]
               {[target1]
                  play_anim
                  [base1_anim]
                  [base1_amplitude]
                  [base1_speed]
                  [base1_phase]
                  [add1_anim]
                  [add1_amplitude]
                  [add1_speed]
                  [add1_phase]}}
            {if
               [target2]
               {[target2]
                  play_anim
                  [base2_anim]
                  [base2_amplitude]
                  [base2_speed]
                  [base2_phase]
                  [add2_anim]
                  [add2_amplitude]
                  [add2_speed]
                  [add2_phase]}}
            {if
               [target3]
               {[target3]
                  play_anim
                  [base3_anim]
                  [base3_amplitude]
                  [base3_speed]
                  [base3_phase]
                  [add3_anim]
                  [add3_amplitude]
                  [add3_speed]
                  [add3_phase]}}
            {if
               [target4]
               {[target4]
                  play_anim
                  [base4_anim]
                  [base4_amplitude]
                  [base4_speed]
                  [base4_phase]
                  [add4_anim]
                  [add4_amplitude]
                  [add4_speed]
                  [add4_phase]}}
            {if
               [target5]
               {[target5]
                  play_anim
                  [base5_anim]
                  [base5_amplitude]
                  [base5_speed]
                  [base5_phase]
                  [add5_anim]
                  [add5_amplitude]
                  [add5_speed]
                  [add5_phase]}}
            {if
               [target6]
               {[target6]
                  play_anim
                  [base6_anim]
                  [base6_amplitude]
                  [base6_speed]
                  [base6_phase]
                  [add6_anim]
                  [add6_amplitude]
                  [add6_speed]
                  [add6_phase]}})
         (on_set_frame
            {if
               [backlight]
               {if
                  {exists backlight_color1.env}
                  {[backlight]
                     set
                     color1
                     {backlight_color1.env get ambient_color}}}
               {if
                  {exists backlight_color2.env}
                  {[backlight]
                     set
                     color2
                     {backlight_color2.env get ambient_color}}}
               {if
                  {exists backlight_color3.env}
                  {[backlight]
                     set
                     color3
                     {backlight_color3.env get ambient_color}}}
               {[backlight]
                  update}}))))
#define MIDI_SAMPLE_TYPE
((editor
      (midi_note
         string
         (list MIDI_NOTE_LIST)
         (post_sync
            {$this generate_index})
         (help
            "Midi note which will trigger this sample from the midi player MidiParser")))
   (midi_note
      "")
   (index -1)
   (generate_index
      {do
         ($index -1)
         {if
            {!=
               [midi_note]
               ""}
            {find_elem
               MIDI_NOTE_LIST
               [midi_note]
               $index}}
         {set
            [index]
            $index}
         {$this init_type}})
   (init_type
      {do
         ($dir
            {$this dir})
         ($global_fader
            {$dir find midi_global_level.fade FALSE})
         ($cross_fader
            {$dir find midi_music_cross_fade.fade FALSE})
         ($song_fader
            {$dir find midi_song_level.fade FALSE})
         {if
            {&&
               $global_fader
               {!
                  {find_elem
                     {$this get_array faders}
                     $global_fader}}}
            {$this
               insert
               (faders
                  {$this
                     size
                     (faders)})
               $global_fader}}
         {if
            {&&
               $cross_fader
               {!
                  {find_elem
                     {$this get_array faders}
                     $cross_fader}}}
            {$this
               insert
               (faders
                  {$this
                     size
                     (faders)})
               $cross_fader}}
         {if
            {&&
               $song_fader
               {!
                  {find_elem
                     {$this get_array faders}
                     $song_fader}}}
            {$this
               insert
               (faders
                  {$this
                     size
                     (faders)})
               $song_fader}}}))
(Sfx
   (types
      (midi_sample MIDI_SAMPLE_TYPE)))
(Sound
   (types
      (midi_sample MIDI_SAMPLE_TYPE)))
(ObjectDir
   (types
      (song
         #ifndef HX_PC
         (change_subdir
            ($file)
            {if_else
               {&&
                  {exists game_panel}
                  {has_substr
                     $file
                     ":"}}
               {cond
                  ({has_substr
                        $file
                        "/world/shared/director.milo"}
                     "world/shared/director.milo")
                  ({has_substr
                        $file
                        "/sfx/audio_mixer.milo"}
                     "sfx/audio_mixer.milo")
                  "stream_cache"}
               kDataUnhandled})
         (change_proxies
            {do
               ($barks
                  {$this find barks})
               {if
                  {&&
                     {!
                        {using_cd}}
                     {exists game_panel}
                     $barks
                     {$barks is_proxy}}
                  {$barks
                     override_proxy
                     {song_mgr
                        barks_file
                        {gamedata get song}}}}})
         #endif)
      (character_vo
         (editor
            (character
               symbol
               (list
                  {do
                     ($array
                        {array 0})
                     {push_back $array ''}
                     {foreach
                        $char
                        (CHARACTERS)
                        {push_back
                           $array
                           {elem $char 0}}}
                     $array}))
            (collect_lipsyncs
               script
               (script
                  {$this collect_lipsyncs FALSE}))
            (cam_type
               symbol
               (list
                  ('' intro_quick intro_skills intro_playlist battle_intro_crew camp_intro_crew win_dlg_char win_mov_char win_hype_solo win_hype_crew win_hype_diff_crew win_camp_crew lose_camp_char battle_outro_crew)))
            (win_level
               symbol
               (list
                  ('' low med high)))
            (facial_anim_editing
               (indent
                  (edit_snd
                     object
                     (class Sound)
                     (help
                        "force the system to always choose this sound.")
                     (dir $this)
                     (refresh create_face_prop_anim))
                  (create_face_prop_anim
                     script
                     (script
                        {script_task
                           kTaskSeconds
                           (delay 0.0)
                           (script
                              {do
                                 ($base_name
                                    {file_get_base
                                       {[edit_snd]
                                          name}})
                                 ($name
                                    {sprint
                                       $base_name
                                       ".anim"})
                                 ($lipsync
                                    {find_obj
                                       $this
                                       {sprint
                                          $base_name
                                          ".lipsync"}})
                                 ($prop
                                    (''))
                                 ($anim
                                    "")
                                 {if
                                    {!
                                       {find_obj $this $name}}
                                    {set
                                       $anim
                                       {new PropAnim}}
                                    {$anim set_name $name $this}
                                    {if
                                       {&&
                                          $lipsync
                                          {$lipsync
                                             has
                                             (viseme_list)}}
                                       {foreach
                                          $viseme
                                          {$lipsync get viseme_list}
                                          {set_elem $prop 0 $viseme}
                                          {$anim add_keys $lipsync $prop kPropFloat}
                                          {$anim set_key $lipsync $prop 0.0}
                                          {$anim
                                             set_key
                                             $lipsync
                                             $prop
                                             {'*'
                                                30.0
                                                {$lipsync get duration}}}}}
                                    {milo update_objects}
                                    {milo
                                       edit
                                       $anim
                                       "PropAnim Keys"}}})})
                     (help
                        "Create a facial anim to sync with this camshot")
                     (hide
                        {'||'
                           {==
                              [edit_snd]
                              ""}
                           {!=
                              {$this editing_face_anim}
                              ""}}))
                  (edit_face_prop_anim
                     script
                     (script
                        {do
                           ($name
                              {sprint
                                 {file_get_base
                                    {[edit_snd]
                                       name}}
                                 ".anim"})
                           ($anim
                              {find_obj $this $name})
                           {if
                              $anim
                              {milo
                                 edit
                                 $anim
                                 "PropAnim Keys"}}})
                     (hide
                        {'||'
                           {==
                              [edit_snd]
                              ""}
                           {==
                              {$this editing_face_anim}
                              ""}}))
                  (save
                     script
                     (script
                        {do
                           ($edit_snd
                              [edit_snd])
                           {set
                              [edit_snd]
                              ""}
                           {$this perforce_resave}
                           {set
                              [edit_snd]
                              $edit_snd}})))))
         (lipsync '')
         (character '')
         (cam_type '')
         (win_level '')
         (edit_snd
            "")
         (last_snd
            "")
         (enter DX_NO_MENU_MOTIONBLUR
            {set
               [edit_snd]
               ""})
         (flow_commands
            (play_lipsync_sound
               (editor
                  (lipsync_sound
                     object
                     (class Sound)))
               (lipsync_sound '')))
         (play_lipsync_sound
            ($sound)
            {if
               $sound
               {set
                  [last_snd]
                  $sound}
               {script_task
                  kTaskSeconds
                  (delay 0)
                  (script
                     {$sound play}
                     {if
                        {&&
                           {exists synth}
                           {exists game_panel}
                           {game_panel paused}}
                        {synth pause_all_sfx TRUE}})}
               {set
                  [lipsync]
                  {find_obj
                     $this
                     {sprint
                        {file_get_base
                           {$sound name}}
                        ".lipsync"}}}
               {do
                  ($mogg
                     {$sound get mogg})
                  ($wav
                     {$sound get sample})
                  {if
                     $mogg
                     {$mogg add_sink $this}}
                  {if
                     $wav
                     {$this mogg_ready}}}})
         (play_vo
            ($cam_shot)
            {$this clear_mogg_sinks}
            {if_else
               {&&
                  $edit_mode
                  [edit_snd]}
               {$this
                  play_lipsync_sound
                  [edit_snd]}
               {do
                  ($cam_flow_name
                     {sprint
                        {file_get_base
                           {$cam_shot name}}
                        ".flow"})
                  ($cam_flow
                     {find_obj $this $cam_flow_name})
                  {if_else
                     $cam_flow
                     {handle
                        ($cam_flow activate)}
                     {handle
                        (vo.flow activate)}}}}
            {do
               ($foley_snd_name
                  {sprintf
                     "%s.snd"
                     {basename
                        {$cam_shot name}}})
               ($foley_snd
                  {$this find $foley_snd_name})
               {if
                  $foley_snd
                  {$foley_snd play}}})
         (mogg_ready
            {$this play_lipsync}
            {$this clear_mogg_sinks})
         (play_lipsync
            {do
               ($character
                  {$this dir})
               ($lip_driver
                  {find_obj $character face.lipdrv})
               {cond
                  ({! $lip_driver}
                     {print
                        "No Lip Driver for "
                        {path_name $character}})
                  ({!
                        [lipsync]}
                     {print
                        "No Lip Sync found for "
                        {path_name $character}})
                  (TRUE
                     {$character
                        enable_facial_animation
                        [lipsync]
                        0.0}
                     {$character set_blinking FALSE}
                     {$lip_driver
                        set
                        lipsync
                        [lipsync]}
                     {$character
                        set_lipsync_offset
                        {-
                           {taskmgr seconds}}}
                     {do
                        ($sync_anim
                           {find_obj
                              $this
                              {sprint
                                 {file_get_base
                                    {[lipsync]
                                       name}}
                                 ".anim"}})
                        {if
                           $sync_anim
                           {$sync_anim animate}}})}})
         (clear_mogg_sinks
            {$this
               iterate
               MoggClip
               $mogg_clip
               {$mogg_clip remove_sink $this}})
         #ifndef _SHIP
         (collect_lipsyncs
            ($save)
            {do
               ($lipsync_list
                  {array 0})
               ($changed FALSE)
               ($path
                  {file_get_path
                     {file_relative_path
                        {file_root}
                        {$this get_path_name}}})
               ($pattern
                  {sprint
                     $path
                     "/"
                     [character]
                     "/lipsync_src/*.milo"})
               ($me $this)
               ($sound_ext
                  ".snd")
               {$this
                  iterate
                  CharLipSync
                  $lipsync
                  {push_back $lipsync_list $lipsync}}
               {if
                  {find_substr
                     $path
                     "/eng/"}
                  {foreach
                     $lipsync
                     $lipsync_list
                     {$lipsync
                        set_name
                        {$lipsync name}
                        main}}}
               {file_recurse_pattern
                  $filename
                  $pattern
                  {do
                     ($file
                        {load_objects $filename})
                     {if
                        $file
                        {$file
                           iterate
                           CharLipSync
                           $lipsync
                           {do
                              ($base_name
                                 {tolower
                                    {file_get_base
                                       {$lipsync name}}})
                              ($keys
                                 {array 0})
                              {if
                                 {!
                                    {find_obj
                                       $me
                                       {sprint
                                          $base_name
                                          ".lipsync"}}}
                                 {$lipsync
                                    set_name
                                    {sprint
                                       $base_name
                                       ".lipsync"}
                                    $me}
                                 {$lipsync set type facial_exp}
                                 {$me
                                    iterate
                                    PropAnim
                                    $anim
                                    {if
                                       {==
                                          {file_get_base
                                             {$anim name}}
                                          {file_get_base
                                             {$lipsync name}}}
                                       {foreach
                                          $elem
                                          $lipsync_list
                                          {if
                                             {==
                                                {$elem name}
                                                {$lipsync name}}
                                             {$anim replace_target $elem $lipsync}}}}}
                                 {set $changed TRUE}}}}
                        {delete $file}}}}
               {foreach
                  $lipsync
                  $lipsync_list
                  {delete $lipsync}}
               {if
                  $changed
                  {if
                     {exists milo}
                     {milo update_objects}}
                  {if
                     $save
                     {$me perforce_resave}}}})
         (editing_face_anim
            {do
               ($obj
                  "")
               {if
                  [edit_snd]
                  {set
                     $obj
                     {find_obj
                        $this
                        {sprint
                           {file_get_base
                              {[edit_snd]
                                 name}}
                           ".anim"}}}}
               $obj})
         #endif)))
(RndDir
   (types
      (chars
         (enter DX_NO_MENU_MOTIONBLUR WORLD_SETUP_CHARACTERS))
      (lighting
         (editor)
         (enter DX_NO_MENU_MOTIONBLUR WORLD_SETUP_CHARACTERS))
      (clip_test
         (song '')
         (editor
            (song
               symbol
               (list
                  {if_else
                     {exists fake_songmgr}
                     {fake_songmgr get_song_list}
                     ''})
               (post_sync
                  {do
                     ($path
                        {fake_songmgr
                           get_path
                           [song]
                           "clips.milo"})
                     {print
                        "loading "
                        $path}
                     {clips.fm select clips $path}
                     {clips.fm start_load FALSE}
                     {{main get driver}
                        set
                        clips
                        clips}
                     {milo edit main Character}})
               (help
                  "choose a song to preview, auto-loads when chosen"))
            (win_moves
               script
               (script
                  {{main get driver}
                     set
                     clips
                     {main find clips}}
                  {milo edit main Character})
               (help
                  "switches character to win moves")))
         (on_milo_loaded
            {milo
               edit
               $this
               "Object Type"}
            {milo
               edit
               main
               "HamCharacter"}))))
(Fur
   (init
      {do
         ($ww
            {find_obj
               {$this dir}
               world.wind})
         {if
            $ww
            {set
               [wind]
               $ww}}}))
(WorldCrowd
   (init
      {$this set_type band})
   (types
      (band
         (enter DX_NO_MENU_MOTIONBLUR
            {$this set_fullness 1 1}
            {handle
               ($hamwardrobe add_crowd $this)}))))
(WorldDir
   (types
      (world
         (venue yacht)
         (song '')
         (play_mode solo)
         (character '')
         (second_character '')
         (difficulty kDifficultyEasy)
         (second_difficulty kDifficultyEasy)
         (practice_start '')
         (practice_end '')
         (blend_debug 0)
         (no_transitions FALSE)
         (start_loop_margin 1)
         (end_loop_margin 1)
         (first_clip '')
         (second_clip '')
         (editor
            (load_song
               script
               (script
                  {do
                     {gamedata
                        setp
                        0
                        difficulty
                        [difficulty]}
                     {gamedata
                        setp
                        1
                        difficulty
                        [second_difficulty]}
                     {$this load_and_play_song}
                     {set
                        [first_clip]
                        ''}
                     {set
                        [second_clip]
                        ''}})
               (help
                  "Load up the the venue(s)+scene(s)+song authoring as dictated by the currently selected milo song"))
            WORLD_EDITOR_PLAYMODE
            (venue
               symbol
               (list
                  {file_list
                     "world/*/*.milo"
                     TRUE
                     $path
                     {do
                        ($v
                           {file_get_base $path})
                        {has_substr
                           $path
                           {sprint
                              $v
                              "/"
                              $v
                              ".milo"}}}})
               (help
                  "Venue to load, set before hitting load_song"))
            (song
               symbol
               (list
                  {if_else
                     {exists fake_songmgr}
                     {fake_songmgr get_song_list}
                     ''})
               (help
                  "choose a song to preview"))
            (character
               symbol
               (list
                  ('' MILO_CHARACTERS))
               (help
                  "Which character to load, none means use default")
               (post_sync
                  {milo record $hamdirector character}
                  {{gamedata player 0}
                     set_character_outfit
                     [character]}))
            (second_character
               symbol
               (list
                  ('' MILO_CHARACTERS))
               (help
                  "Which character to load, none means use default")
               (post_sync
                  {milo record $hamdirector second_character}
                  {{gamedata player 1}
                     set_character_outfit
                     [second_character]}))
            (difficulty
               int
               (list DIFF_LIST)
               (post_sync
                  {milo record $hamdirector difficulty}
                  {gamedata
                     setp
                     0
                     difficulty
                     [difficulty]}))
            (second_difficulty
               int
               (list DIFF_LIST)
               (post_sync
                  {milo record $hamdirector second_difficulty}
                  {gamedata
                     setp
                     1
                     difficulty
                     [second_difficulty]}
                  {$this reset_practice}))
            (save_song
               script
               (script
                  {$hamdirector save_song})
               (help
                  "Save the song.anim back into its difficulty.milo file!"))
            (edit_song_anim
               script
               (script
                  {$this on_edit_song_anim})
               (help
                  "Pop open the song.anim editor"))
            (edit_dancer_faceanim
               script
               (script
                  {do
                     ($face_anim
                        {$hamdirector
                           dancer_face_anim
                           {gamedata getp 0 difficulty}})
                     {if_else
                        $face_anim
                        {do
                           {$face_anim setup}
                           {$hamdirector resync_face_drivers}
                           {milo
                              edit
                              $face_anim
                              "PropAnim Keys"}}
                        {notify
                           "Could not edit dancer_face.anim, no song loaded"}}})
               (help
                  "Pop open the dancer_face.anim editor"))
            (save_faceanims
               script
               (script
                  {$hamdirector save_face_anims})
               (help
                  "Saves face animation and allows previewing"))
            (toggle_driver
               script
               (script
                  {if
                     $hamdirector
                     {$hamdirector toggle_driver}})
               (help
                  "Toggles clip blending, character (c)enter, clip (o)rigin, and (w)aypoint debugging."))
            (reset_feet
               script
               (script
                  {if
                     $hamdirector
                     {$hamdirector teleport_chars}}))
            (edit_player0
               script
               (script
                  {if_else
                     $hamwardrobe
                     {milo
                        edit
                        {$hamwardrobe get_character 0}
                        HamCharacter}
                     {notify
                        "Could not edit character 0, not loaded"}})
               (help
                  "edit player0"))
            (refresh_face_animation
               script
               (script
                  {if
                     $hamdirector
                     {$hamdirector enable_facial_animation}})
               (help
                  "Re-hookup facial animation after changing character."))
            (highlight_player0
               script
               (script
                  {if_else
                     $hamwardrobe
                     {milo
                        set_highlights
                        ({$hamwardrobe get_character 0})}
                     {notify
                        "Could not highlight character 0, not loaded"}})
               (help
                  "highlight player0"))
            (practice_start
               symbol
               (list
                  {if_else
                     $hamdirector
                     {$hamdirector
                        practice_list
                        {gamedata getp 0 difficulty}}
                     ('')})
               (post_sync
                  {if
                     {&&
                        {milo cur_dir}
                        $hamdirector}
                     {do
                        ($moves
                           {{milo cur_dir}
                              find
                              moves
                              FALSE})
                        {if
                           $moves
                           {$moves
                              iterate
                              PracticeSection
                              $sect
                              {if
                                 {==
                                    {$sect get difficulty}
                                    [difficulty]}
                                 {foreach_int
                                    $i
                                    0
                                    {$sect
                                       size
                                       (steps)}
                                    {if
                                       {&&
                                          {==
                                             learn
                                             {$sect
                                                get
                                                (steps $i type)}}
                                          {==
                                             [practice_start]
                                             {$sect
                                                get
                                                (steps $i start)}}}
                                       {$hamdirector
                                          set
                                          practice_end
                                          {$sect
                                             get
                                             (steps $i end)}}
                                       {set
                                          [practice_end]
                                          {$hamdirector get practice_end}}}}}}}}})
               (refresh practice_end)
               (help
                  "practice mode start frame"))
            (practice_end
               symbol
               (list
                  {if_else
                     $hamdirector
                     {$hamdirector
                        practice_list
                        {gamedata getp 0 difficulty}}
                     ('')})
               (help
                  "practice mode end frame"))
            (start_loop_margin
               int
               (range 1 100)
               (help
                  "number of measures of rest before the practice start"))
            (end_loop_margin
               int
               (range 1 100)
               (help
                  "number of measures of rest after the practice end"))
            (start_practice
               script
               (script
                  {do
                     {$this on_set_practice}
                     {$this on_edit_song_anim}})
               (help
                  "Sets the practice frames, starting practice mode"))
            (reset_practice
               script
               (script
                  {$this reset_practice})
               (help
                  "Clear out the practice frames, stopping practice mode")
               (refresh practice_start practice_end))
            (blend_debug
               int
               (help
                  "If > 0, is which clip to show by itself rather than doing full blending")
               (post_sync
                  {milo record $hamdirector blend_debug}
                  {$hamdirector
                     set
                     blend_debug
                     [blend_debug]}))
            (no_transitions
               bool
               (help
                  "If true, pretends there are no transition clips")
               (post_sync
                  {milo record $hamdirector no_transitions}
                  {$hamdirector
                     set
                     no_transitions
                     [no_transitions]}))
            (first_clip
               symbol
               (list
                  {if_else
                     $hamdirector
                     {$hamdirector practice_list kDifficultyExpert}
                     ('')}))
            (second_clip
               symbol
               (list
                  {if_else
                     $hamdirector
                     {$hamdirector practice_list kDifficultyExpert}
                     ('')}))
            (make_transition_clip
               script
               (script
                  {do
                     {$hamdirector
                        make_transition_clip
                        [first_clip]
                        [second_clip]
                        0}})
               (help
                  "Save the transition between these moves into clips.milo"))
            (clip1_self_transition
               script
               (script
                  {do
                     {$hamdirector
                        make_transition_clip
                        [first_clip]
                        [first_clip]
                        1}})
               (help
                  "Save the transition from clip1 into itself into clips.milo")))
         (on_edit_song_anim
            {if
               $hamdirector
               {if_else
                  {$hamdirector player_song_anim 0}
                  {milo
                     edit
                     {$hamdirector player_song_anim 0}
                     "PropAnim Keys"}
                  {notify
                     "Could not edit song.anim, no song loaded"}}})
         (load_and_play_song
            {if
               {&&
                  [song]
                  $hamdirector}
               {gamedata
                  set
                  venue
                  [venue]}
               {gamedata
                  set
                  song
                  [song]}
               {do
                  ($crew
                     {if_else
                        {fake_songmgr
                           has_data
                           [song]
                           crew}
                        {fake_songmgr
                           get_data
                           [song]
                           crew}
                        crew01})
                  {gamedata setp 0 crew $crew}
                  {gamedata setp 1 crew $crew}}
               {$hamdirector
                  load_song
                  {fake_songmgr
                     get_path
                     [song]
                     ".milo"}
                  {fake_songmgr
                     get_data
                     [song]
                     bpm}
                  TRUE
                  FALSE
                  {get_backup_dancer_type}}
               {do
                  ($song_obj
                     {milo song_object})
                  {if
                     $song_obj
                     {$song_obj
                        set
                        song
                        [song]}}}
               {if
                  {exists milo}
                  {milo
                     set
                     anim
                     {milo song_object}}}
               {{{$hamdirector get merger}
                     dir}
                  enter}
               {if_else
                  {==
                     {$hamdirector get loaded_new_song}
                     TRUE}
                  {$this reset_practice}
                  {do
                     {$this on_set_practice}
                     {$this on_edit_song_anim}}}
               {$hamdirector enable_facial_animation}})
         (reset_practice
            {set
               [practice_start]
               ''}
            {set
               [practice_end]
               ''}
            {$this on_set_practice}
            {if
               $hamdirector
               {if
                  $hud_panel
                  {$hud_panel reset}}
               {handle
                  ({$hamdirector get_world}
                     performance_mode)}
               {hamprovider set game_stage intro}
               {hamprovider set game_stage playing}})
         (on_set_practice
            {if
               $hamdirector
               {$hamdirector
                  set
                  practice_start
                  [practice_start]}
               {$hamdirector
                  set
                  practice_end
                  [practice_end]}
               {$hamdirector
                  set
                  start_loop_margin
                  [start_loop_margin]}
               {$hamdirector
                  set
                  end_loop_margin
                  [end_loop_margin]}
               {$hamdirector pick_new_shot}
               {if
                  $tool_song
                  {if_else
                     {'||'
                        {==
                           [practice_start]
                           ''}
                        {==
                           [practice_end]
                           ''}}
                     {do
                        {$tool_song set_loop_start 0}
                        {$tool_song
                           set_loop_end
                           {$tool_song get song_end_frame}}
                        {if
                           {exists audio}
                           {audio clear_loop}}}
                     {do
                        ($start_beat)
                        ($end_beat)
                        {$hamdirector practice_beats $start_beat $end_beat}
                        {set
                           $start_beat
                           {round
                              {-
                                 $start_beat
                                 {'*'
                                    4
                                    [start_loop_margin]}}}}
                        {set
                           $end_beat
                           {round
                              {'+'
                                 $end_beat
                                 {'*'
                                    4
                                    [end_loop_margin]}}}}
                        {if
                           {exists audio}
                           {audio set_loop $start_beat $end_beat}}
                        {$tool_song
                           set_loop_start
                           {beat_to_seconds $start_beat}}
                        {$tool_song
                           set_loop_end
                           {beat_to_seconds $end_beat}}
                        {if
                           $hamdirector
                           {if
                              $hud_panel
                              {$hud_panel reset}}
                           {handle
                              ({$hamdirector get_world}
                                 skills_mode)}
                           {hamprovider set game_stage intro_start}
                           {hamprovider set game_stage intro_end}}
                        {do
                           ($fade_out_anim
                              {find_obj $hud_panel sound_bank skills_music_fade_out.anim})
                           {if
                              $fade_out_anim
                              {$fade_out_anim
                                 animate
                                 (range 0 0)}}}
                        {$tool_song
                           jump_to
                           {'*' $start_beat 480}}}}}})
         (on_milo_loaded
            {set
               [song]
               ''}
            {milo
               edit
               $this
               "Object Type"})
         (propanim_endscrub
            ($anim)
            {if
               {&&
                  $anim
                  {==
                     {$anim name}
                     "song.anim"}}
               {if
                  $hamdirector
                  {$hamdirector teleport_chars}}})
         WORLD_OBJECT_BASE
         (autosave FALSE)
         (select_camera
            {if
               $hamdirector
               {handle
                  ($hamdirector select_camera)}
               {handle
                  ($hamdirector update_freestyle_state)}})
         (post_tool_sync
            {$this enter}))
      (venue
         (lookat_cameras 1)
         (editor
            (lookat_cameras
               bool
               (help
                  "Do the guys look at the cameras in this venue?  if false, they can still be forced to look at the camera through song anim keyframes or shot-specific lookats"))
            WORLD_OBJECT_EDITOR_COMMON)
         (enter DX_NO_MENU_MOTIONBLUR
            WORLD_SETUP_CHARACTERS
            {if
               {exists game_panel}
               {game_panel
                  add_sink
                  $world
                  ()
                  kSinkModeExportType}}
            {if
               {exists master}
               {master
                  add_sink
                  $this
                  (downbeat beat halfbeat quarterbeat first_beat beat_2 beat_3 beat_4)}}
            {if
               {exists active_events_parser}
               {active_events_parser
                  add_sink
                  $this
                  (music_start music_end)}})
         (exit)
         WORLD_OBJECT_VALIDATE)
      (shell
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use when this panel is on screen")
               (post_sync
                  {$this update_postproc}))
            (refresh_postproc
               script
               (script
                  {$this update_postproc})
               (help
                  "Refresh postprocessor selection on the tool")))
         (postprocess '')
         (enter DX_NO_MENU_MOTIONBLUR
            {$this update_postproc})
         (update_postproc
            {if_else
               [postprocess]
               {[postprocess]
                  select}
               {rnd reset_postproc}}))))
(HamCamShot
   (init
      {$this set_type ham}
      {set
         [category]
         TEST_CAM})
   (types
      (ham
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use for this shot"))
            (crowd_density
               float
               (range 0 1)
               (help
                  "density of crowd"))
            (crowd_lod
               int
               (range 0 2)
               (help
                  "LOD of crowd texture (0 =  256x512) (1 = 128x256) (2 = 64x128)"))
            (crowd_face_camera
               bool
               (help
                  "Whether the crowd should face the camera"))
            (use_char_projection
               bool
               (help
                  "Use the RenderToTexture for character 0 instead of actually rendering the character (for Break it Down cameras)"))
            (worst
               bool
               (help
                  "When using -worst_only with venuetest, only looks at these shots"))
            (use_manual_lipsync
               bool
               (help
                  "This shot uses manually-authored lipsync"))
            (create_sync_anim
               script
               (script
                  {if
                     {!
                        {$this sync_anim}}
                     {script_task
                        kTaskSeconds
                        (delay 0.0)
                        (script
                           {do
                              ($dir
                                 {$this dir})
                              ($sync_anim_name
                                 {sprint
                                    {file_get_base
                                       [name]}
                                    ".anim"})
                              ($sync_anim
                                 {find_obj $dir $sync_anim_name})
                              ($hooked_up FALSE)
                              ($anim
                                 "")
                              {foreach_int
                                 $i
                                 0
                                 {$this
                                    size
                                    (anims)}
                                 {set
                                    $anim
                                    [anims $i]}
                                 {if
                                    {==
                                       {$anim name}
                                       $sync_anim_name}
                                    {set $hooked_up TRUE}}}
                              {if
                                 {! $sync_anim}
                                 {set
                                    $sync_anim
                                    {new PropAnim}}
                                 {$sync_anim set_name $sync_anim_name $dir}
                                 {set
                                    [use_manual_lipsync]
                                    TRUE}}
                              {if
                                 {! $hooked_up}
                                 {$this
                                    append
                                    (anims)
                                    $sync_anim}}
                              {if
                                 $sync_anim
                                 {milo update_objects}
                                 {milo
                                    edit
                                    $sync_anim
                                    "PropAnim Keys"}}})}})
               (help
                  "Create a facial anim to sync with this camshot")
               (hide
                  {!=
                     {$this sync_anim}
                     ""})
               (refresh edit_sync_anim use_manual_lipsync))
            (edit_sync_anim
               script
               (script
                  {do
                     ($sync_anim
                        {$this sync_anim})
                     {if
                        $sync_anim
                        {milo
                           edit
                           $sync_anim
                           "PropAnim Keys"}}})
               (help
                  "Edit the facial sync anim")
               (hide
                  {!
                     {$this sync_anim}}))
            (edit_vo_bank_P1
               script
               (script
                  {do
                     ($char
                        {find_obj
                           {$this dir}
                           "player0"})
                     ($bank
                        {$char get vo_bank})
                     {if
                        $bank
                        {$bank
                           set
                           edit_snd
                           {$bank get last_snd}}
                        {milo
                           edit
                           $bank
                           "Object Type"}}}))
            (edit_vo_bank_P2
               script
               (script
                  {do
                     ($char
                        {find_obj
                           {$this dir}
                           "player1"})
                     ($bank
                        {$char get vo_bank})
                     {if
                        $bank
                        {$bank
                           set
                           edit_snd
                           {$bank get last_snd}}
                        {milo
                           edit
                           $bank
                           "Object Type"}}}))
            (char_setup
               (indent
                  (player0
                     symbol
                     (list
                        {$this all_chars_list}))
                  (player1
                     symbol
                     (list
                        {$this all_chars_list}))
                  (backup0
                     symbol
                     (list
                        {$this all_chars_list}))
                  (backup1
                     symbol
                     (list
                        {$this all_chars_list}))
                  (apply_current
                     script
                     (script
                        {do
                           ($dir
                              {$this dir})
                           {foreach
                              $prop
                              (player0 player1 backup0 backup1)
                              {$this
                                 set
                                 $prop
                                 {{$dir find $prop}
                                    get
                                    outfit}}}})
                     (refresh player0 player1 backup0 backup1))))
            (apply_chars
               script
               (script
                  {$this load_ideal_characters})
               (help
                  "Load the character(s) who are ideal for this shot"))
            (stop_vo
               script
               (script
                  {$this stop_vo})
               (help
                  "Stop all VO sounds from playing for current characters"))
            (next_shot_added
               bool
               (help
                  "Was a next_shot added to this shot at runtime?")))
         (postprocess
            {object
               ""})
         (crowd_density 1)
         (crowd_lod 0)
         (crowd_face_camera FALSE)
         (worst FALSE)
         (use_char_projection FALSE)
         (use_manual_lipsync FALSE)
         (next_shot_added FALSE)
         (shot_over
            {if
               {&&
                  $hamdirector
                  {exists game_panel}}
               {switch
                  [category]
                  ((OUTRO_CAM_CATS)
                     {handle
                        (game_panel game_outro)})
                  ((INTRO_CAM_CATS)
                     {$hamdirector pick_new_shot})}})
         (update_overlay
            #ifndef _SHIP
            {rnd
               reflect
               camera
               {print
                  "HamCamShot:"
                  {$this name}
                  " category:"
                  [category]
                  "\n"}}
            #endif)
         (play_group
            ($char $grp $fwd $units $event)
            {do
               ($drv
                  {$char find main.drv})
               {if_else
                  $grp
                  {do
                     {$drv play_group $grp kPlayNoBlend}
                     {$drv set_first_beat_offset $fwd $units $event}}
                  {$drv clear}}})
         (teleport_char
            ($char $ret)
            {$char cam_teleport $ret}
            {handle
               ($char snap_spotlight_constraint)})
         (using_character
            ($char)
            {'||'
               {==
                  {$hamdirector get_character_sym 0}
                  $char}
               {==
                  {$hamdirector get_character_sym 1}
                  $char}})
         (start_shot
            {if
               [use_char_projection]
               {do
                  ($already_in_list FALSE)
                  ($player0
                     "")
                  {foreach_int
                     $i
                     0
                     {$this
                        size
                        (hide_list)}
                     {if
                        {==
                           "player0"
                           {[hide_list $i]
                              name}}
                        {set $already_in_list TRUE}}}
                  {if
                     {! $already_in_list}
                     {cond
                        ($hamdirector
                           {set
                              $player0
                              {find_obj
                                 {$hamdirector get cur_world}
                                 "player0"}})
                        (TRUE
                           {set
                              $player0
                              {find_obj
                                 {$this dir}
                                 "player0"}})}
                     {if
                        $player0
                        {$this
                           append
                           (hide_list)
                           $player0}}}}}
            {if
               $hamdirector
               {$hamdirector
                  set
                  cam_postproc
                  [postprocess]}
               {if
                  {&&
                     {exists gamemode}
                     {gamemode in_mode dance_battle}
                     {!
                        {has_any_substr
                           [category]
                           ("INTRO_"
                              "OUTRO_"
                              "WIN_")}}}
                  {foreach_int
                     $i
                     0
                     2
                     {set
                        $bk_dancer
                        {find_obj
                           {$hamdirector get cur_world}
                           {sprint
                              "backup"
                              $i}}}
                     {if
                        $bk_dancer
                        {$bk_dancer set_showing FALSE}}}}
               {do
                  ($mode
                     {hamprovider get gameplay_mode})
                  {if
                     {&&
                        {!= $mode dance_battle}
                        {!= $mode practice}
                        {&&
                           $hamdirector
                           {==
                              {{$hamdirector get cur_world}
                                 name}
                              subway}}
                        {has_substr
                           [category]
                           "Area2"}}
                     {$hamdirector
                        hide_backups
                        {!=
                           {hamprovider get cam_player_config}
                           kHamPlayer1}
                        {!=
                           {hamprovider get cam_player_config}
                           kHamPlayer0}}}}}
            #ifndef _SHIP
            {$this update_overlay}
            #endif
            {hamprovider
               set
               use_char_projection
               [use_char_projection]}
            {if
               {&&
                  $hamdirector
                  {!
                     {$hamdirector get disable_picking}}}
               {if
                  {find_elem
                     (LOSE WIN)
                     [category]}
                  {handle
                     ($world playing_final_cam)}}}
            {$this setup_robot_damage}
            {set $play_bk_vo TRUE}
            {if
               {&&
                  {has_substr
                     [category]
                     "WIN_CAMP_CREW06"}
                  {!=
                     [category]
                     WIN_CAMP_CREW06_5}}
               {do
                  ($flow
                     {find_obj
                        {$this dir}
                        finale_song_win.flow})
                  {if
                     $flow
                     {$flow activate}}}
               {set $play_bk_vo FALSE}}
            {if
               $hamwardrobe
               {do
                  ($cam_type)
                  ($cam_character)
                  ($cam_crew)
                  ($win_level)
                  ($vo_bank)
                  {camshot_vo_data
                     [category]
                     $cam_type
                     $cam_character
                     $cam_crew
                     $win_level}
                  {foreach_int
                     $i
                     0
                     {gamedata max_players}
                     {do
                        ($characters
                           ({$hamwardrobe get_character $i}
                              {$hamwardrobe get_backup $i}))
                        ($player_flag
                           {$this get player_flag})
                        {if
                           {&&
                              $edit_mode
                              {! $character}}
                           {set_elem
                              $characters
                              0
                              {find_obj
                                 {$this dir}
                                 {sprint
                                    "player"
                                    $i}}}}
                        {foreach
                           $character
                           $characters
                           {if
                              {&&
                                 $character
                                 {'||'
                                    {!
                                       {startswith
                                          {$character name}
                                          "backup"}}
                                    $play_bk_vo}}
                              {set
                                 $vo_bank
                                 {$character get vo_bank}}
                              {if
                                 $vo_bank
                                 {if
                                    {!=
                                       [category]
                                       NEXT_SHOT}
                                    {$character set enable_auto_blinks TRUE}}
                                 {if
                                    [use_manual_lipsync]
                                    {do
                                       ($lip_driver
                                          {find_obj $character face.lipdrv})
                                       ($default_lipsync
                                          {find_obj
                                             {$this dir}
                                             {sprint
                                                "player"
                                                {'+' 1 $i}
                                                "_cam.lipsync"}})
                                       {if
                                          {&& $lip_driver $default_lipsync}
                                          {$lip_driver set lipsync $default_lipsync}
                                          {handle
                                             ($default_lipsync reset_all)}}}}
                                 {unless
                                    {== $cam_type ''}
                                    {$this play_character_vo $cam_type $character $player_flag $cam_character $cam_crew $i}}}}}}}}}
            {foreach_int
               $idx
               0
               {size
                  [crowds]}
               {do
                  ($crowd
                     [crowds $idx crowd])
                  {if
                     $crowd
                     {$crowd
                        set
                        rotate
                        [crowd_face_camera]}
                     {$crowd
                        set_fullness
                        [crowd_density]
                        [crowd_density]}
                     {$crowd
                        set
                        lod
                        [crowd_lod]}}}})
         (setup_robot_damage
            {if_else
               {hamprovider get finale}
               {do
                  {if
                     {&&
                        {has_substr
                           [category]
                           "INTRO_"}
                        {exists meta_performer}
                        {meta_performer has_playlist}
                        {==
                           {meta_performer get_playlist_index}
                           0}}
                     {hamprovider set robot_a_damage 0}
                     {hamprovider set robot_b_damage 0}}
                  {if
                     {has_substr
                        [category]
                        "WIN_CAMP_CREW06"}
                     {do
                        ($len
                           {strlen
                              [category]})
                        ($num
                           {int
                              {substr
                                 [category]
                                 {- $len 1}
                                 1}})
                        {hamprovider set robot_a_damage $num}
                        {hamprovider set robot_b_damage $num}}}}
               {if
                  $hamdirector
                  {do
                     ($char0
                        {$hamdirector get_character_sym 0})
                     ($char1
                        {$hamdirector get_character_sym 1})
                     {hamprovider
                        set
                        robot_a_damage
                        {if_else
                           {&&
                              {$this using_character robota02}
                              {!=
                                 practice
                                 {hamprovider get gameplay_mode}}}
                           5
                           0}}
                     {hamprovider
                        set
                        robot_b_damage
                        {if_else
                           {&&
                              {$this using_character robotb02}
                              {!=
                                 practice
                                 {hamprovider get gameplay_mode}}}
                           5
                           0}}}}})
         (play_character_vo
            ($cam_type $character $player_flag $cam_character $cam_crew $player_index)
            {$character set enable_auto_blinks FALSE}
            {if
               {&&
                  {'||'
                     {== $player_flag kHamPlayerBoth}
                     {== $player_flag kHamPlayerOff}
                     {== $player_flag $player_index}
                     {&&
                        {== $player_index 0}
                        {== $player_flag kHamPlayer0SoloInOut}}
                     {&&
                        {== $player_index 1}
                        {== $player_flag kHamPlayer1SoloInOut}}}
                  {'||'
                     {== $cam_character all}
                     {==
                        $cam_character
                        {$vo_bank get character}}
                     {&&
                        {== $cam_character active}
                        {gamedata getp $i playing}}}
                  {'||'
                     {== $cam_crew ''}
                     {==
                        $cam_crew
                        {get_crew_for_character
                           {$vo_bank get character}}}}}
               {$vo_bank set cam_type $cam_type}
               {$vo_bank set win_level $win_level}
               {$vo_bank play_vo $this}})
         (stop_shot
            {if
               $hamdirector
               {$hamdirector
                  set
                  cam_postproc
                  {object
                     ""}}
               {$hamdirector restore_backups}})
         #ifndef _SHIP
         (stop_vo
            {if
               $edit_mode
               {print
                  "MILO STOP SHOT!\n"}
               {foreach_int
                  $i
                  0
                  {gamedata max_players}
                  {do
                     ($characters
                        ({$hamwardrobe get_character $i}
                           {$hamwardrobe get_backup $i}))
                     {unless
                        $character
                        {set_elem
                           $characters
                           0
                           {find_obj
                              {$this dir}
                              {sprint
                                 "player"
                                 $i}}}}
                     {foreach
                        $character
                        $characters
                        {if
                           {&&
                              $character
                              {$character get vo_bank}}
                           {{$character get vo_bank}
                              iterate
                              Sound
                              $sound
                              {$sound stop}}}}}}})
         #endif
         (validate
            {if
               {&&
                  {find_elem
                     (LOSE WIN)
                     [category]}
                  [postprocess]}
               {notify
                  {path_name $this}
                  "must specify no postprocess to show"}}
            {if
               {==
                  [category]
                  PRACTICE_LOOP}
               {foreach_int
                  $i
                  {-
                     {$this
                        size
                        (targets)}
                     1}
                  -1
                  {notify_and_fix
                     FALSE
                     {$this
                        remove
                        (targets $i)}
                     $this
                     "PRACTICE_LOOP cameras may not have targets, they will pop"}}}
            {if
               {==
                  [category]
                  PRACTICE}
               {foreach_int
                  $i
                  0
                  {$this
                     size
                     (targets)}
                  {notify_and_fix
                     {!
                        [targets $i return]}
                     {set
                        [targets $i return]
                        FALSE}
                     $this
                     "PRACTICE cameras should not return teleported targets, they will pop when looping into the PRACTICE_LOOP camera"}}})
         (sync_anim
            {do
               ($sync_anim
                  "")
               ($anim
                  "")
               {foreach_int
                  $i
                  0
                  {$this
                     size
                     (anims)}
                  {set
                     $anim
                     [anims $i]}
                  {if
                     {&&
                        {==
                           {$anim class_name}
                           PropAnim}
                        {==
                           {file_get_base
                              {$anim name}}
                           {file_get_base
                              [name]}}}
                     {set $sync_anim $anim}}}
               $sync_anim})
         (shot_ok
            ($prev_shot)
            TRUE)
         (player0 '')
         (player1 '')
         (backup0 '')
         (backup1 '')
         (load_ideal_characters
            {do
               ($dir
                  {$this dir})
               ($outfit '')
               ($char
                  "")
               {foreach
                  $prop
                  (player0 player1 backup0 backup1)
                  {set
                     $outfit
                     {$this get $prop}}
                  {if
                     $outfit
                     {set
                        $char
                        {$dir find $prop}}
                     {$char
                        set
                        outfit_dir
                        {if_else
                           {has_substr
                              $outfit
                              "_bd"}
                           "char/main/backup"
                           "char/main/dancer"}}
                     {$char set outfit $outfit}
                     {$char start_load TRUE}}}})
         (all_chars_list
            {do
               ($array
                  {array 0})
               ($mainchars
                  {file_list
                     "char/main/dancer/*.milo"})
               ($bdchars
                  {file_list
                     "char/main/backup/*.milo"})
               {insert_elems
                  $array
                  {size $array}
                  $mainchars}
               {insert_elems
                  $array
                  {size $array}
                  $bdchars}
               {sort $array}
               $array}))))
(HamDirector
   (test_singleton)
   (init
      {$this set_type ham})
   (types
      (ham
         (freestyle_range
            (-1 -1))
         (enter DX_NO_MENU_MOTIONBLUR
            {if
               {$this get_world}
               {{$this get_world}
                  add_sink
                  $this
                  (skills_mode performance_mode multiplayer_mode game_won skills_learn skills_review skills_freestyle_enter skills_freestyle_exit intro_end beat_animation_start)
                  kSinkModeType}}
            {hamprovider
               add_sink
               $this
               (on_performance_change on_game_stage_change)
               kSinkModeHandle
               FALSE}
            {if
               {exists master}
               {set_elem
                  [freestyle_range]
                  0
                  {master event_beat freestyle_start}}
               {set_elem
                  [freestyle_range]
                  1
                  {-
                     {master event_beat freestyle_end}
                     8}}}
            {if
               $edit_mode
               {set
                  [freestyle_enabled]
                  FALSE}})
         (exit
            {hamprovider remove_sink $this}
            {if
               {$this get_world}
               {{$this get_world}
                  remove_sink
                  $this}})
         (intro_end
            {$this enable_facial_animation})
         (update_freestyle_state
            {do
               ($nav_mode
                  {hamprovider get ui_nav_mode})
               {if
                  {!= $nav_mode pause}
                  {do
                     ($should_be_in_freestyle
                        {&&
                           {== $nav_mode game}
                           {$this
                              beat_in_freestyle
                              {taskmgr beat}}})
                     {if
                        {!=
                           $should_be_in_freestyle
                           [player_freestyle]}
                        {set
                           [player_freestyle]
                           $should_be_in_freestyle}}}}})
         (beat_in_freestyle
            ($b)
            {if_else
               $force_freestyle
               TRUE
               {if_else
                  [freestyle_enabled]
                  {&&
                     {>=
                        $b
                        {elem
                           [freestyle_range]
                           0}}
                     {<
                        $b
                        {elem
                           [freestyle_range]
                           1}}}
                  FALSE}})
         (on_game_stage_change
            {if
               {==
                  {hamprovider get game_stage}
                  playing}
               {$this enable_facial_animation}})
         (get_battle_intro
            ($num)
            {do
               ($crew_nm
                  {toupper
                     {gamedata getp $num crew}})
               {symbol
                  {sprint
                     "BATTLE_INTRO_"
                     $crew_nm}}})
         (pick_intro_shot
            {if
               {$this camera_source}
               {{$this camera_source}
                  camera_random_seed
                  {get_date_time}}}
            {if_else
               {&&
                  {exists gamemode}
                  {gamemode in_mode dance_battle}}
               {do
                  ($cat0
                     {$this get_battle_intro 0})
                  ($cat1
                     {$this get_battle_intro 1})
                  ($dir
                     {$this get_world})
                  ($battle_intro)
                  {if
                     $dir
                     {set
                        $battle_intro
                        {$dir
                           set_compound_shots
                           $cat0
                           $cat1
                           ((player_flag
                                 (kHamPlayerOff kHamPlayer0))
                              (player_flag
                                 (kHamPlayerOff kHamPlayer1)))}}}
                  $battle_intro}
               {do
                  ($cat
                     {$this get_simple_intro_category})
                  {$this set_dircut $cat TRUE}}})
         (set_intro_shot
            ($shot)
            {if
               {exists game}
               {game
                  set_intro_real_time
                  {if_else
                     $shot
                     {-
                        {$shot duration_seconds}}
                     0}}})
         (beat_animation_start
            {if
               $hamwardrobe
               {$hamwardrobe crowd_end_override}})
         (load_game_song
            ($load)
            {do
               ($song
                  {gamedata get song})
               ($data
                  {song_mgr get_meta_data $song})
               {$this
                  load_song
                  {sprint
                     {song_mgr
                        song_file_path
                        $song
                        ".milo"}}
                  {$data bpm}
                  $load
                  TRUE
                  {get_backup_dancer_type}}})
         (get_simple_intro_category
            {cond
               ({!= $cheat.intro_quick 0}
                  INTRO_QUICK)
               ({&&
                     {exists gamemode}
                     {==
                        practice
                        {gamemode get gameplay_mode}}}
                  {if_else $played_long_practice_intro INTRO_SKILLS INTRO_SKILLS_LONG})
               ({&&
                     {exists gamemode}
                     {gamemode in_mode playlist_perform}
                     {!
                        {meta_performer is_first_song}}}
                  INTRO_PLAYLIST)
               ({&&
                     {exists gamemode}
                     {gamemode in_mode campaign_perform}
                     {<=
                        {meta_performer get_num_restarts}
                        0}
                     {'||'
                        {meta_performer is_crew_new}
                        {meta_performer has_playlist}}
                     {meta_performer is_first_song}}
                  {do
                     ($crew_nm
                        {toupper
                           {gamedata getp 0 crew}})
                     {symbol
                        {sprint
                           "CAMP_INTRO_"
                           $crew_nm}}})
               (TRUE INTRO_QUICK)})
         (set_force_postproc_no_blend
            ($postproc)
            {set
               $postproc
               {sprint
                  {gamedata get venue}
                  "_"
                  $postproc
                  ".pp"}}
            {set
               [force_postproc]
               {find_obj
                  {$this dir}
                  $postproc}}
            {set
               [force_postproc_blend]
               1}
            {set
               [force_postproc_blend_rate]
               1})
         (set_force_postproc
            ($postproc $rate)
            {set
               $postproc
               {sprint
                  {gamedata get venue}
                  "_"
                  $postproc
                  ".pp"}}
            {set
               [force_postproc]
               {find_obj
                  {$this dir}
                  $postproc}}
            {set
               [force_postproc_blend]
               0}
            {set
               [force_postproc_blend_rate]
               $rate})
         (reset_low_performance
            {if
               [force_postproc]
               {set
                  [force_postproc_blend_rate]
                  -1}})
         (on_performance_change
            {if
               {!=
                  {hamprovider get gameplay_mode}
                  dance_battle}
               {switch
                  {hamprovider get performance}
                  (low
                     {$this set_force_postproc performance_low 1}
                     {handle
                        ($hamwardrobe crowd bad)})
                  (high
                     {$this set_force_postproc performance_high 1}
                     {handle
                        ($hamwardrobe crowd ok)})
                  (awesome
                     {$this set_force_postproc performance_awesome 1}
                     {handle
                        ($hamwardrobe crowd great)})}})
         (game_won
            {if
               {&&
                  $hamwardrobe
                  {exists gamemode}}
               {do
                  ($stars
                     {game_panel get num_stars})
                  {$hamwardrobe
                     crowd
                     {if_else
                        {==
                           practice
                           {gamemode get gameplay_mode}}
                        {cond
                           ({>= $stars 5}
                              skills_realtime_great)
                           ({>= $stars 3}
                              skills_realtime_ok)
                           skills_realtime_bad}
                        {cond
                           ({>= $stars 5}
                              realtime_great)
                           ({>= $stars 3}
                              realtime_ok)
                           realtime_bad}}}}})
         (skills_mode kDataUnhandled)
         (performance_mode kDataUnhandled)
         (multiplayer_mode kDataUnhandled)
         (skills_learn kDataUnhandled)
         (skills_review
            {$this set disable_picking FALSE}
            kDataUnhandled)
         (skills_freestyle_enter kDataUnhandled)
         (skills_freestyle_exit kDataUnhandled)
         (move_interp
            ($a $b $r)
            {if
               $hud_panel
               {$hud_panel move_interp $a $b $r}
               {do
                  ($move
                     {$hud_panel
                        get_move
                        {$hud_panel get move}})
                  {if
                     $move
                     {$move
                        set_frame
                        {'*'
                           $r
                           {$move end_frame}}}}}})
         (update_move_keys
            ($safe)
            {foreach_int
               $i
               0
               {gamedata max_players}
               {do
                  ($song_anim
                     {$this player_song_anim $i})
                  ($frame_measure 0)
                  {if
                     {&&
                        $safe
                        $song_anim
                        {$this get_world}}
                     {$song_anim
                        foreach_keyframe
                        $this
                        (move)
                        $frame
                        $value
                        {set
                           $frame_measure
                           {/
                              {seconds_to_beat
                                 {/ $frame 30}}
                              4}}
                        {$song_anim
                           replace_frame
                           {'*'
                              30
                              {beat_to_seconds
                                 {'*'
                                    4
                                    {int
                                       {'+' $frame_measure 0.5}}}}}}}}}})
         (toggle_driver
            {if_else
               $hamwardrobe
               {foreach_int
                  $i
                  0
                  {gamedata max_players}
                  {do
                     ($char
                        {$hamwardrobe get_character $i})
                     ($drv
                        {find_obj $char song.hdrv})
                     {char_debug
                        $drv
                        {find_obj $char song.hreg}
                        {find_obj $char left.ikfoot}
                        {find_obj $char right.ikfoot}}}}
               {notify
                  "No song loaded yet, can't toggle driver"}}))))
(HamWardrobe
   (description
      "Manager class that clothes characters and loads animations under different conditions")
   (test_singleton)
   (editor)
   (types
      (ham
         (crew '')
         (character0 '')
         (character1 '')
         (dance_battle FALSE)
         (editor
            (crew
               symbol
               (list
                  {do
                     ($array
                        {array 0})
                     {push_back $array ''}
                     {foreach
                        $elem
                        (CREWS)
                        {push_back
                           $array
                           {localize
                              {elem $elem 0}}}}
                     $array})
               (post_sync
                  {if
                     {!=
                        [crew]
                        ''}
                     {foreach
                        $elem
                        (CREWS)
                        {if
                           {==
                              {localize
                                 {elem $elem 0}}
                              [crew]}
                           {do
                              ($chars_array
                                 {find $elem characters})
                              {set
                                 [character0]
                                 {elem $chars_array 1}}
                              {set
                                 [character1]
                                 {elem $chars_array 2}}}}}})
               (refresh character0 character1))
            (character0
               symbol
               (list
                  {do
                     ($array
                        {array 0})
                     {push_back $array ''}
                     {foreach
                        $char
                        (CHARACTERS)
                        {push_back
                           $array
                           {elem $char 0}}}
                     $array}))
            (character1
               symbol
               (list
                  {do
                     ($array
                        {array 0})
                     {push_back $array ''}
                     {foreach
                        $char
                        (CHARACTERS)
                        {push_back
                           $array
                           {elem $char 0}}}
                     $array}))
            (swap_characters
               script
               (script
                  {do
                     ($char0
                        [character0])
                     {set
                        [character0]
                        [character1]}
                     {set
                        [character1]
                        $char0}})
               (refresh character0 character1))
            (dance_battle
               bool
               (help
                  "Load crew members as backup dancers?"))
            (load
               script
               (script
                  {do
                     ($crew_name '')
                     {foreach
                        $elem
                        (CREWS)
                        {if
                           {==
                              {localize
                                 {elem $elem 0}}
                              [crew]}
                           {set
                              $crew_name
                              {elem $elem 0}}}}
                     {$this
                        load_characters
                        {symbol
                           {sprint
                              [character0]
                              "01"}}
                        {symbol
                           {sprint
                              [character1]
                              "01"}}}}))))))