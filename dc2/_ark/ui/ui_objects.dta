#include ..\config\macros.dta
(UIComponent
   (select_frames 15))
(UIFontImporter
   (default_bitmap_path
      "ui/image"))
(HamList
   (description
      "List with Hammer-specific features")
   (allowed_dirs PanelDir UIListDir)
   (superclasses UIList)
   (resources_path
      "resource/lists/")
   (init
      {set
         [list_resource]
         default})
   (ext lst)
   (editor)
   (types))
(HamLabel
   (description
      "Label with Hammer-specific features")
   (allowed_dirs RndDir)
   (superclasses UILabel)
   (ext lbl)
   (editor
      (in_anim
         object
         (class Anim)
         (help
            "anim used before label change"))
      (out_anim
         object
         (class Anim)
         (help
            "anim used after label change")))
   (init
      {set
         [styles 0 font_resource]
         "default"})
   (resources_path
      "resource/fonts/"))
(UISlider
   (allowed_dirs))
(UIButton
   (allowed_dirs))
(UIList
   (allowed_dirs))
(UILabel
   (allowed_dirs))
(HamMove
   (anim_props
      (verb
         symbol
         (help
            "Verb for use in skills mode to associate with vo.")
         (list $all_verb_barks))
      (verb_slow
         symbol
         (list $all_verb_barks))
      (move_sound
         symbol
         (list
            (clap_01 clap_02 snap_01 snap_02)))))
(SongDifficultyDisplay
   (allowed_dirs RndDir)
   (superclasses UIComponent)
   (ext sdd)
   (resources_path
      "resource/song_difficulty_display")
   (init
      {set
         [resource]
         default})
   (editor
      (resource
         RESOURCE_DIR_PTR
         (help
            "TODO fill me in"))))
(StarsDisplay
   (allowed_dirs RndDir)
   (superclasses UIComponent)
   (ext std)
   (init
      {set
         [resource]
         default})
   (resources_path
      "resource/stars_display")
   (editor
      (resource
         RESOURCE_DIR_PTR
         (help
            "TODO Fill me in")))
   (flow_commands
      (set_stars
         (editor
            (stars int))
         (stars 0))))
#define RIBBON_MODE
("kRibbonSwell"
   "kRibbonSlide"
   "kRibbonSelect"
   "kRibbonDisengaged")
#define NAV_INPUT_TYPE
("kNavInput_RightHand"
   "kNavInput_LeftHand")
(HamNavList
   (description
      "List of navigation actions controlled by a single hand with gestures")
   (superclasses UIComponent)
   (allowed_dirs RndDir)
   (ext hnl)
   (editor
      (list_ribbon_resource
         RESOURCE_DIR_PTR
         (help
            "HamListRibbon resource file"))
      (list_dir_resource
         RESOURCE_DIR_PTR
         (help
            "UIListDir resource file"))
      (mode
         int
         (list
            (RIBBON_MODE))
         (help
            "Mode for animations")
         (no_test))
      (nav_provider
         object
         (class HamNavProvider))
      (play_enter_anim
         script
         (script
            {$this play_enter_anim}))
      (enable_navigation
         script
         (script
            {$this enable_navigation}))
      (disable_navigation
         script
         (script
            {$this disable_navigation}))
      (enabled bool)
      (always_use_active_skeleton
         bool
         (help
            "Automatically tie this navlist to the active skeleton"))
      (only_use_when_focused
         bool
         (help
            "This list can only be used when it is focused"))
      (suppress_automatic_enter
         bool
         (help
            "Don't automatically play the enter anim when this component enters"))
      (nav_input_type
         int
         (list
            (NAV_INPUT_TYPE)))
      (scroll_speed_anim
         object
         (class Anim))
      (big_elements
         (array symbol)
         (help
            "Elements that match these will be bigger than the other elements")))
   (types)
   (init
      {set
         [list_ribbon_resource]
         "main_ribbon"}
      {set
         [list_dir_name]
         "default"})
   (resources_path
      "resource/ham_list_ribbon/"
      (UIListDir
         "resource/lists/"))
   (flow_commands
      (play_enter_anim
         (editor))
      (enable_navigation
         (editor))
      (disable_navigation
         (editor))))
(HamNavProvider
   (description
      "List of data for HamNavList")
   (superclasses)
   (allowed_dirs RndDir)
   (ext hnp)
   (editor
      (nav_items
         (array
            (struct
               (label
                  symbol
                  (list
                     {$this token_list}))
               (checkbox
                  int
                  (list
                     (CHECKBOX_MODE)))))
         (no_test)))
   (types))
(PracticeOptionsProvider
   (description
      "List of data for HamNavList about practice options")
   (superclasses HamNavProvider)
   (allowed_dirs RndDir)
   (ext pop)
   (editor)
   (types))
(PhotoSpotlightPositioner
   (description
      "Positions a group at the skeleton's feet")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (ext psp)
   (editor
      (player int)
      (spotlight
         object
         (class Group))
      (ref_image
         object
         (class Mesh)))
   (types))
(MeterDisplay
   (allowed_dirs RndDir)
   (superclasses UIComponent)
   (ext md)
   (resources_path
      "resource/meter_display")
   (init
      {set
         [resource]
         default})
   (editor
      (resource
         RESOURCE_DIR_PTR
         (help
            "TODO fill me in"))))
(MiniLeaderboardDisplay
   (allowed_dirs RndDir)
   (superclasses UIComponent)
   (ext mld)
   (resources_path
      "resource/mini_leaderboard_display")
   (init
      {set
         [resource]
         default})
   (editor
      (resource
         RESOURCE_DIR_PTR
         (help
            "TODO fill me in"))))
(PropertyEventProvider
   (allowed_dirs ObjectDir)
   (types
      (results_panel
         (editor
            (score int)
            (stars int)
            (high_score bool)
            (best_stars bool)
            (no_flashcards bool)
            (progress_percent_start float)
            (progress_percent_end float)
            (at_max_rank bool)
            (unlocked_medium bool)
            (unlocked_expert bool)
            (unlocked_no_flashcards bool))
         (score 32453)
         (stars 4)
         (high_score TRUE)
         (best_stars FALSE)
         (no_flashcards FALSE)
         (progress_percent_start 0.25)
         (progress_percent_end 0.75)
         (at_max_rank FALSE)
         (unlocked_medium FALSE)
         (unlocked_expert FALSE)
         (unlocked_no_flashcards FALSE))
      (multiuser_panel
         (editor
            (s0_pane
               symbol
               (list
                  (seldiff_pane startgame_pane readywait_pane character_select_pane outfit_select_pane crew_select_pane venue_select_pane locked_pane))
               (help
                  "The pane side 0 is on"))
            (s1_pane
               symbol
               (list
                  (seldiff_pane startgame_pane readywait_pane character_select_pane outfit_select_pane crew_select_pane venue_select_pane locked_pane))
               (help
                  "The pane side 1 is on"))
            (side
               int
               (help
                  "The side that has focus in controller mode")))
         (s0_pane seldiff_pane)
         (s1_pane seldiff_pane)
         (side 0))))
(Flow
   (flow_commands
      (hamprovider_handle
         (editor
            (event symbol))
         (event '')))
   (types
      (default
         (hamprovider_handle
            ($event)
            {handle
               (hamprovider $event)}))))
(RndDir
   (types
      (game_bank
         (cached_sound_groups
            {array 0})
         (enter DX_NO_MENU_MOTIONBLUR
            {if
               {<=
                  {size
                     [cached_sound_groups]}
                  0}
               {$this
                  iterate
                  (Group sound_group)
                  $snd_grp
                  {push_back
                     [cached_sound_groups]
                     $snd_grp}}}
            {foreach
               $snd_grp
               [cached_sound_groups]
               {$snd_grp shuffle}}))
      (alert_box
         (editor
            (text
               string
               (help
                  "Text to display"))
            (alert_type
               symbol
               (list
                  (general fitness unlock server free4all campaign none))
               (help
                  "Type of msg")))
         (text
            "")
         (alert_type ''))))
(Group
   (types
      (sound_group
         (index -1)
         (last_played
            "")
         (editor
            (index
               int
               (range
                  -1
                  {$this
                     size
                     (objects)})
               (help
                  "Index of next sound"))
            (play
               script
               (script
                  {$this play})
               (help
                  "Play the sound")))
         (flow_commands play shuffle)
         (shuffle
            {do
               ($children
                  {$this get_group_children})
               {$this clear_objects}
               {if
                  {! $edit_mode}
                  {random_sort $children}}
               {foreach
                  $elem
                  $children
                  {if
                     {==
                        {$elem class_name}
                        Sound}
                     {$this add_object $elem}}}
               {set
                  [index]
                  {if_else
                     {$this
                        size
                        (objects)}
                     0
                     -1}}})
         (reset
            {$this shuffle})
         (next_sound
            {if
               {<
                  [index]
                  0}
               {$this shuffle}}
            {if_else
               {&&
                  {>=
                     [index]
                     0}
                  {<
                     [index]
                     {$this
                        size
                        (objects)}}}
               [objects
                  [index]]
               ""})
         (play
            {do
               ($sound
                  {$this next_sound})
               {if
                  $sound
                  {$sound play}
                  {set
                     [last_played]
                     $sound}
                  {set
                     [index]
                     {mod
                        {'+'
                           [index]
                           1}
                        {$this
                           size
                           (objects)}}}}})
         (stop
            {if
               [last_played]
               {[last_played]
                  stop}})
         (force_next_play_index
            ($index)
            {set
               [index]
               $index}))))
(Object
   (types
      #include gameplay/dance_battle_mini_game.dta))
(PanelDir
   (types
      (campaign
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use when this panel is on screen")
               (post_sync
                  {$this update_postproc}))
            (refresh_postproc
               script
               (script
                  {$this update_postproc})
               (help
                  "Refresh postprocessor selection on the tool")))
         (postprocess '')
         (enter DX_NO_MENU_MOTIONBLUR
            {$this update_postproc})
         (update_postproc
            {if_else
               [postprocess]
               {[postprocess]
                  select}
               {rnd reset_postproc}})
         (flow_commands
            (animation_finished
               (editor)))
         (animation_finished
            {{ui focus_panel}
               animation_finished}))))
#include gameplay/game_modes.dta