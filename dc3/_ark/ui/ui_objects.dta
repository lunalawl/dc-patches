#include ..\config\macros.dta
(UIComponent
   (select_frames 15))
(UIFontImporter
   (default_bitmap_path
      "ui/image"))
(HamList
   (description
      "List with Hammer-specific features")
   (allowed_dirs PanelDir UIListDir)
   (superclasses UIList)
   (resources_path
      "resource/lists/")
   (init
      {set
         [list_resource]
         default})
   (ext lst)
   (editor)
   (types))
(HamLabel
   (description
      "Label with Hammer-specific features")
   (allowed_dirs RndDir)
   (superclasses UILabel)
   (ext lbl)
   (editor
      (in_anim
         object
         (class Anim)
         (help
            "anim used before label change"))
      (out_anim
         object
         (class Anim)
         (help
            "anim used after label change")))
   (init
      {set
         [styles 0 font_resource]
         "default"})
   (resources_path
      "resource/fonts/"))
(UISlider
   (allowed_dirs))
(UIButton
   (allowed_dirs))
(UIList
   (allowed_dirs))
(UILabel
   (allowed_dirs))
(HamMove
   (anim_props
      (verb
         symbol
         (help
            "Verb for use in skills mode to associate with vo.")
         (list $all_verb_barks))
      (verb_slow
         symbol
         (list $all_verb_barks))
      (move_sound
         symbol
         (list
            (clap_01 clap_02 snap_01 snap_02)))))
(SongDifficultyDisplay
   (allowed_dirs RndDir)
   (superclasses UIComponent)
   (ext sdd)
   (resources_path
      "resource/song_difficulty_display")
   (init
      {set
         [resource]
         default})
   (editor
      (resource
         RESOURCE_DIR_PTR
         (help
            "TODO fill me in"))))
(StarsDisplay
   (allowed_dirs RndDir)
   (superclasses UIComponent)
   (ext std)
   (init
      {set
         [resource]
         default})
   (resources_path
      "resource/stars_display")
   (editor
      (resource
         RESOURCE_DIR_PTR
         (help
            "TODO Fill me in")))
   (flow_commands
      (set_stars
         (editor
            (stars int))
         (stars 0))))
#define RIBBON_MODE
("kRibbonSwell"
   "kRibbonSlide"
   "kRibbonSelect"
   "kRibbonDisengaged")
#define NAV_INPUT_TYPE
("kNavInput_RightHand"
   "kNavInput_LeftHand")
(HamNavList
   (description
      "List of navigation actions controlled by a single hand with gestures")
   (superclasses UIComponent)
   (allowed_dirs RndDir)
   (ext hnl)
   (editor
      (list_ribbon_resource
         RESOURCE_DIR_PTR
         (help
            "HamListRibbon resource file"))
      (header_ribbon_resource
         RESOURCE_DIR_PTR
         (help
            "HamListRibbon resource file"))
      (list_dir_resource
         RESOURCE_DIR_PTR
         (help
            "UIListDir resource file"))
      (scroll_speed_indicator_resource
         RESOURCE_DIR_PTR
         (help
            "HamScrollSpeedIndicator resource file"))
      (mode
         int
         (list
            (RIBBON_MODE))
         (help
            "Mode for animations")
         (no_test))
      (nav_provider
         object
         (class HamNavProvider))
      (play_enter_anim
         script
         (script
            {$this play_enter_anim}))
      (enable_navigation
         script
         (script
            {$this enable_navigation}))
      (disable_navigation
         script
         (script
            {$this disable_navigation}))
      (enabled bool)
      (always_use_active_skeleton
         bool
         (help
            "Automatically tie this navlist to the active skeleton"))
      (only_use_when_focused
         bool
         (help
            "This list can only be used when it is focused"))
      (suppress_automatic_enter
         bool
         (help
            "Don't automatically play the enter anim when this component enters"))
      (skip_enter_anim
         bool
         (help
            "Skip the enter anim altogether"))
      (nav_input_type
         int
         (list
            (NAV_INPUT_TYPE)))
      (scroll_speed_anim
         object
         (class Anim))
      (big_elements
         (array symbol)
         (help
            "Elements that match these will be bigger than the other elements")))
   (types)
   (init
      {set
         [list_ribbon_resource]
         "main_ribbon"}
      {set
         [list_dir_name]
         "default"})
   (resources_path
      "resource/ham_list_ribbon/"
      (UIListDir
         "resource/lists/"))
   (flow_commands
      (play_enter_anim
         (editor))
      (enable_navigation
         (editor))
      (disable_navigation
         (editor))))
(HamNavProvider
   (description
      "List of data for HamNavList")
   (superclasses)
   (allowed_dirs RndDir)
   (ext hnp)
   (editor
      (nav_items
         (array
            (struct
               (label
                  symbol
                  (list
                     {$this token_list})
                  (help
                     "used for a list entry with a single label"))
               (labels
                  (array
                     symbol
                     (list
                        {$this token_list}))
                  (help
                     "used for a list entry with a list of labels"))
               (checkbox
                  int
                  (list
                     (CHECKBOX_MODE)))))
         (no_test)))
   (types))
(PracticeOptionsProvider
   (description
      "List of data for HamNavList about practice options")
   (superclasses HamNavProvider)
   (allowed_dirs RndDir)
   (ext pop)
   (editor)
   (types))
(PhotoSpotlightPositioner
   (description
      "Positions a group at the skeleton's feet")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (ext psp)
   (editor
      (player int)
      (spotlight
         object
         (class Group))
      (ref_image
         object
         (class Mesh)))
   (types))
(MeterDisplay
   (allowed_dirs RndDir)
   (superclasses UIComponent)
   (ext md)
   (resources_path
      "resource/meter_display")
   (init
      {set
         [resource]
         default})
   (editor
      (resource
         RESOURCE_DIR_PTR
         (help
            "TODO fill me in"))))
(MiniLeaderboardDisplay
   (allowed_dirs RndDir)
   (superclasses UIComponent)
   (ext mld)
   (resources_path
      "resource/mini_leaderboard_display")
   (init
      {set
         [resource]
         default})
   (editor
      (resource
         RESOURCE_DIR_PTR
         (help
            "TODO fill me in"))))
(PropertyEventProvider
   (allowed_dirs ObjectDir)
   (types
      (results_panel
         (editor
            (score int)
            (cumulative_score int)
            (player1_percent_complete int)
            (player2_percent_complete int)
            (any_player_xbox_live bool)
            (stars int)
            (high_score bool)
            (best_stars bool)
            (no_flashcards bool)
            (progress_percent_start float)
            (progress_percent_end float)
            (at_max_rank bool)
            (unlocked_medium bool)
            (unlocked_expert bool)
            (unlocked_no_flashcards bool)
            (player1_display_side int)
            (player2_display_side int))
         (score 32453)
         (cumulative_score 223)
         (player1_percent_complete 91)
         (player2_percent_complete 92)
         (any_player_xbox_live TRUE)
         (stars 4)
         (high_score TRUE)
         (best_stars FALSE)
         (no_flashcards FALSE)
         (progress_percent_start 0.25)
         (progress_percent_end 0.75)
         (at_max_rank FALSE)
         (unlocked_medium FALSE)
         (unlocked_expert FALSE)
         (unlocked_no_flashcards FALSE)
         (player1_display_side 0)
         (player2_display_side 0))
      (multiuser_panel
         (editor
            (s0_pane
               symbol
               (list
                  (seldiff_pane startgame_pane readywait_pane character_select_pane outfit_select_pane crew_select_pane venue_select_pane locked_pane))
               (help
                  "The pane side 0 is on"))
            (s1_pane
               symbol
               (list
                  (seldiff_pane startgame_pane readywait_pane character_select_pane outfit_select_pane crew_select_pane venue_select_pane locked_pane))
               (help
                  "The pane side 1 is on"))
            (side
               int
               (help
                  "The side that has focus in controller mode"))
            (left_hand_p1_x_orig
               float
               (help
                  "Temp value used for putting left_hand_p1.hnl offscreen")))
         (s0_pane seldiff_pane)
         (s1_pane seldiff_pane)
         (side 0)
         (left_hand_p1_x_orig -10.0))
      (xp_panel
         (editor
            (xp_for_0 string)
            (xp_for_1 string)
            (progress_percent float)
            (rank_in_tier int)
            (tier int)
            (rank int)
            (rank_text string)
            (ready bool))
         (xp_for_0
            "")
         (xp_for_1
            "")
         (progress_percent 0.0)
         (rank_in_tier 0)
         (tier 0)
         (rank 0)
         (rank_text
            "")
         (ready 0))
      (challenge_result_panel
         (editor
            (rival_beaten bool)
            (grade int)
            (side
               int
               (list
                  ("kSkeletonLeft"
                     "kSkeletonRight")))
            (state int)
            (xp_before_mission int)
            (xp_mission int)
            (xp_total int)
            (rival_is_self bool))
         (rival_beaten 0)
         (grade 0)
         (side 0)
         (state 0)
         (xp_before_mission 0)
         (xp_mission 0)
         (xp_total 0)
         (rival_is_self 0))
      (main_menu_panel
         (editor
            (state
               symbol
               (list
                  (no_profile profile dlc utility)))
            (rank int)
            (tier int)
            (gamertag string))
         (state no_profile)
         (rank 0)
         (tier 0)
         (gamertag
            ""))))
(Flow
   (flow_commands
      (hamprovider_handle
         (editor
            (event symbol))
         (event ''))
      (print_str
         (editor
            (str string))
         (str
            ".")))
   (types
      (default
         (hamprovider_handle
            ($event)
            {handle
               (hamprovider $event)})
         (print_str
            ($str)
            {print
               $str
               "\n"}))))
(RndDir
   (types
      (game_bank
         (cached_sound_groups
            {array 0})
         (vo_playing FALSE)
         (curr_vo '')
         (vo_queue
            ())
         (enter DX_NO_MENU_MOTIONBLUR
            {if
               {<=
                  {size
                     [cached_sound_groups]}
                  0}
               {$this
                  iterate
                  (Group sound_group)
                  $snd_grp
                  {push_back
                     [cached_sound_groups]
                     $snd_grp}}}
            {foreach
               $snd_grp
               [cached_sound_groups]
               {$snd_grp shuffle}}
            {set
               [curr_vo]
               ''}
            {set
               [vo_playing]
               FALSE})
         (flow_commands
            (play_vo
               (editor
                  (sound
                     object
                     (class Sound)
                     (help
                        "Sound clip to play"))
                  (interrupt
                     bool
                     (help
                        "Whether any currently playing VO should be cut off by this one")))
               (sound '')
               (interrupt FALSE))
            stop_vo
            end_vo
            (queue_vo
               (editor
                  (sound
                     object
                     (class Sound)
                     (help
                        "Sound clip to play"))
                  (delay
                     float
                     (help
                        "How long after previous VO to play this one"))
                  (interrupt
                     bool
                     (help
                        "Whether this queued VO should interrupt that might have been played during the delay period")))
               (sound '')
               (delay 0.0)
               (interrupt TRUE)))
         (get_seq
            ($seq)
            {if
               {!=
                  {type $seq}
                  kDataObject}
               {set
                  $seq
                  {find_obj
                     $this
                     {sprint
                        $seq
                        ".snd"}}}}
            $seq)
         (get_seq_length
            ($seq)
            {if_else
               $seq
               {do
                  ($samp
                     {$seq get sample})
                  {if_else
                     $samp
                     {$samp sample_length}
                     0}}
               0})
         (play_vo
            ($seq $interrupt)
            {if
               $interrupt
               {$this stop_vo}}
            {if
               {!
                  [vo_playing]}
               {set
                  [curr_vo]
                  {$this get_seq $seq}}
               {if_else
                  [curr_vo]
                  {do
                     ($curr_vo_time 0.0)
                     {print
                        "playing vo "
                        [curr_vo]
                        "\n"}
                     {[curr_vo]
                        play}
                     {set
                        $curr_vo_time
                        {$this get_seq_length $seq}}
                     {set
                        [vo_playing]
                        TRUE}
                     {script_task
                        kTaskUISeconds
                        (delay $curr_vo_time)
                        (script
                           {$this end_vo})}}
                  {set
                     [curr_vo]
                     ''}}})
         (end_vo
            {set
               [curr_vo]
               ''}
            {set
               [vo_playing]
               FALSE}
            {if
               {>
                  {size
                     [vo_queue]}
                  0}
               {set
                  $vo_elem
                  {elem
                     [vo_queue]
                     0}}
               {remove_elem
                  [vo_queue]
                  $vo_elem}
               {script_task
                  kTaskUISeconds
                  (delay
                     {elem $vo_elem 1})
                  (script
                     {$this
                        play_vo
                        {elem $vo_elem 0}
                        {elem $vo_elem 2}})}})
         (stop_vo
            {if
               [curr_vo]
               {[curr_vo]
                  stop}
               {set
                  [curr_vo]
                  ''}
               {set
                  [vo_playing]
                  FALSE}
               {resize
                  [vo_queue]
                  0}})
         (queue_vo
            ($seq $delay $interrupt)
            {set
               $seq
               {$this get_seq $seq}}
            {if_else
               {!
                  [vo_playing]}
               {do
                  {script_task
                     kTaskUISeconds
                     (delay $delay)
                     (script
                        {$this play_vo $seq $interrupt})}}
               {push_back
                  [vo_queue]
                  {'`'
                     ({',' $seq}
                        {',' $delay}
                        {',' $interrupt})}}}))
      (alert_box
         (editor
            (text
               string
               (help
                  "Text to display"))
            (alert_type
               symbol
               (list
                  (general fitness unlock server free4all free4all_streak campaign none))
               (help
                  "Type of msg"))
            (text_alt
               string
               (help
                  "Text to display"))
            (alert_type_alt
               symbol
               (list
                  (general fitness unlock server free4all free4all_streak campaign none))
               (help
                  "Type of msg")))
         (text
            "")
         (alert_type '')
         (text_alt
            "")
         (alert_type_alt ''))))
(Group
   (types
      (sound_group
         (index -1)
         (last_played
            "")
         (editor
            (index
               int
               (range
                  -1
                  {$this
                     size
                     (objects)})
               (help
                  "Index of next sound"))
            (play
               script
               (script
                  {$this play})
               (help
                  "Play the sound")))
         (flow_commands play shuffle)
         (shuffle
            {do
               ($children
                  {$this get_group_children})
               {$this clear_objects}
               {if
                  {! $edit_mode}
                  {random_sort $children}}
               {foreach
                  $elem
                  $children
                  {if
                     {==
                        {$elem class_name}
                        Sound}
                     {$this add_object $elem}}}
               {set
                  [index]
                  {if_else
                     {$this
                        size
                        (objects)}
                     0
                     -1}}})
         (reset
            {$this shuffle})
         (next_sound
            {if
               {'||'
                  {<
                     [index]
                     0}
                  {>=
                     [index]
                     {$this
                        size
                        (objects)}}}
               {$this shuffle}}
            {if_else
               {&&
                  {>=
                     [index]
                     0}
                  {<
                     [index]
                     {$this
                        size
                        (objects)}}}
               [objects
                  [index]]
               ""})
         (play
            {do
               ($sound
                  {$this next_sound})
               {if
                  $sound
                  {$sound play}
                  {set
                     [last_played]
                     $sound}
                  {set
                     [index]
                     {mod
                        {'+'
                           [index]
                           1}
                        {$this
                           size
                           (objects)}}}}})
         (stop
            {if
               [last_played]
               {[last_played]
                  stop}})
         (force_next_play_index
            ($index)
            {set
               [index]
               $index}))))
(Object
   (types
      #include gameplay/dance_battle_mini_game.dta
      #include gameplay/choose_move.dta
      #include gameplay/name_that_dance_hud.dta
      #include gameplay/cascade_micro_hud.dta
      #include gameplay/concentration_hud.dta))
(PanelDir
   (types
      (campaign
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use when this panel is on screen")
               (post_sync
                  {$this update_postproc}))
            (refresh_postproc
               script
               (script
                  {$this update_postproc})
               (help
                  "Refresh postprocessor selection on the tool")))
         (postprocess '')
         (enter DX_NO_MENU_MOTIONBLUR
            {$this update_postproc})
         (update_postproc
            {if_else
               [postprocess]
               {[postprocess]
                  select}
               {rnd reset_postproc}})
         (flow_commands
            (animation_finished
               (editor)))
         (animation_finished
            {{ui focus_panel}
               animation_finished}))
      (blacklight
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use when this panel is on screen"))
            (refresh_postproc
               script
               (script
                  {$this update_postproc})
               (help
                  "Refresh postprocessor selection on the tool")))
         (postprocess '')
         (activate_shader
            {print
               "blacklight: activate_shader\n"}
            {rnd
               set_postproc_blacklight_override
               [postprocess]})
         (deactivate_shader
            {print
               "blacklight: deactivate_shader\n"}
            {rnd set_postproc_blacklight_override ''})
         (update_postproc
            {if_else
               [postprocess]
               {$this activate_shader}
               {$this deactivate_shader}})
         (flow_commands activate_shader deactivate_shader))
      (letterbox
         (editor
            (hide_mic
               bool
               (help
                  "Whether mic icon should be displayed or not")))
         (hide_mic FALSE)
         (enter DX_NO_MENU_MOTIONBLUR
            {hide_mic.flow activate})
         (on_hide_mic
            {print
               "----- on_hide_mic\n"}
            {set
               [hide_mic]
               TRUE}
            {hide_mic_blacklight.flow activate}
            {hide_mic.flow activate})
         (on_show_mic
            {if
               {shell_input voice_control_enabled}
               {set
                  [hide_mic]
                  FALSE}
               {if_else
                  {ui is_blacklight_mode}
                  {show_mic_blacklight.flow activate}
                  {show_mic.flow activate}}}))))
(HollaBackMinigame
   (description
      "Handles logic of the Holla Back minigame")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (ext rhb)
   (editor)
   (types))
#include gameplay/game_modes.dta