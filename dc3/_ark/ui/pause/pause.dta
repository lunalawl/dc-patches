#define PAUSE_PANEL_HANDLERS
((pause
      {hamprovider set ui_nav_mode pause}
      {game_panel set_paused TRUE}
      {game_screen set_showing FALSE}
      {if
         {&&
            $hamdirector
            {$hamdirector get player_freestyle}}
         {$hamdirector set hide_player_freestyle TRUE}})
   (resume
      {hamprovider set ui_nav_mode game}
      {if
         $hamdirector
         {if
            {$hamdirector get player_freestyle}
            {$hamdirector set hide_player_freestyle FALSE}}
         {$hamdirector reselect_world_postproc}}
      {set $game_unpause_on_enter TRUE}
      {overshell resolve_skeletons}
      {ui force_letterbox_off_immediate}
      {ui pop_screen}))
{new
   HamPanel
   pause_panel
   (file pause.milo)
   (focus right_hand.hnl)
   (back_token natal_guide)
   (show_back_controller_icon FALSE)
   (tertiary_token natal_troubleshooter)
   (back_token natal_guide)
   (can_resume TRUE)
   (pending_show_kinect_tuner FALSE)
   (exit_destination exit_quit)
   (chose_quit FALSE)
   (handle_global_commands TRUE)
   (blacklight_on_enter FALSE)
   (practice_option_index -1)
   PAUSE_PANEL_HANDLERS
   (enter DX_NO_MENU_MOTIONBLUR
      {meta music_start}
      {set
         [chose_quit]
         FALSE}
      {set
         [pending_show_kinect_tuner]
         FALSE}
      {$this pause}
      {unless
         {ui went_back}
         {script_task
            kTaskUISeconds
            (delay 2.0e-2)
            (script
               {run_flow pause.flow})}}
      {if
         {meta_performer last_played_mode}
         {gamemode
            set_mode
            {meta_performer last_played_mode}}}
      {$this update_skeleton_status_internal TRUE}
      {platform_mgr
         add_sink
         $this
         (ui_changed)}
      {shell_input
         add_sink
         $this
         (update_skeleton_status)}
      {if
         {meta_performer has_playlist}
         {playlist_perform.hnp
            set_enabled
            pausecommand_skip
            {!
               {meta_performer is_last_song}}}}
      {hamprovider
         add_sink
         $this
         (on_ui_nav_player_change)
         0
         FALSE}
      {set
         [practice_option_index]
         {right_hand.hnl data_index pausecommand_practice}}
      {$this refresh_provider_for_practice}
      kDataUnhandled)
   (exit
      {hamprovider remove_sink $this on_ui_nav_player_change}
      {meta music_stop}
      {voice_input_panel activate_voice_context ''})
   (on_ui_nav_player_change
      {$this refresh_provider_for_practice})
   (refresh_provider_for_practice
      {if
         {>=
            [practice_option_index]
            0}
         {set
            $nav_pro
            {right_hand.hnl get nav_provider}}
         {if_else
            {==
               {gamedata
                  getp
                  {hamprovider get ui_nav_player}
                  difficulty}
               kDifficultyBeginner}
            {$nav_pro
               set_hidden
               [practice_option_index]
               TRUE}
            {$nav_pro
               set_hidden
               [practice_option_index]
               FALSE}}
         {right_hand.hnl set nav_provider ''}
         {right_hand.hnl set nav_provider $nav_pro}})
   (set_provider
      ($provider)
      {right_hand.hnl set nav_provider $provider})
   (controller_mode_entered
      {set
         [back_token]
         {symbol
            ""}}
      {helpbar resync})
   (controller_mode_exited
      {set
         [back_token]
         natal_guide}
      {helpbar resync})
   (end_game
      ($result)
      {unless
         [chose_quit]
         {ui pop_screen}})
   (exit
      {if
         {exists game}
         {game never_allow_input FALSE}}
      {platform_mgr remove_sink $this ui_changed}
      {shell_input remove_sink $this})
   SELECT_RIGHT_LIST_TOKEN
   (poll
      {if
         {!
            {ui is_letterbox_in_transition}}
         SLIDE_RIGHT_LIST_ITEM}
      {$this update_skeleton_status_internal FALSE})
   (get_num_players
      {do
         ($count 0)
         {if
            {>
               {gamedata getp 0 skeleton_tracking_id}
               0}
            {set
               $count
               {'+' $count 1}}}
         {if
            {>
               {gamedata getp 1 skeleton_tracking_id}
               0}
            {set
               $count
               {'+' $count 1}}}
         $count})
   (update_skeleton_status
      {$this update_skeleton_status_internal FALSE})
   (update_skeleton_status_internal
      ($force)
      {do
         ($enough_skeletons
            {if_else
               {'||'
                  {==
                     {hamprovider get gameplay_mode}
                     dance_battle}
                  {&&
                     {==
                        {hamprovider get gameplay_mode}
                        rhythm_battle}
                     {!
                        {hamprovider get is_in_campaign_mode}}}
                  {==
                     {hamprovider get gameplay_mode}
                     strike_a_pose}
                  {hamprovider get is_in_party_mode}}
               2
               1})
         {if_else
            {'||'
               {>=
                  {$this get_num_players}
                  $enough_skeletons}
               {==
                  {gesture_mgr pause_on_skeleton_loss}
                  0}
               {==
                  {gesture_mgr pause_on_skeleton_loss}
                  1}}
            {do
               {{right_hand.hnl get nav_provider}
                  set_enabled
                  pausecommand_resume
                  TRUE}
               {if
                  {'||'
                     {==
                        [can_resume]
                        FALSE}
                     $force}
                  {$this set can_resume TRUE}
                  {if_else
                     $force
                     {hide_lost_skel_fast.flow activate}
                     {hide_lost_skel.flow activate}}}}
            {do
               {{right_hand.hnl get nav_provider}
                  set_enabled
                  pausecommand_resume
                  FALSE}
               {if
                  {'||'
                     {==
                        [can_resume]
                        TRUE}
                     $force}
                  {$this set can_resume FALSE}
                  {if_else
                     $force
                     {show_lost_skel_fast.flow activate}
                     {show_lost_skel.flow activate}}}}}
         {right_hand.hnl refresh}})
   (NAV_SELECT_MSG
      {switch
         $name
         (pausecommand_resume
            {pause_panel resume})
         (pausecommand_practice
            {pause_panel set exit_destination exit_practice}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_perform
            {pause_panel set exit_destination exit_perform}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_dancebattle
            {pause_panel set exit_destination exit_dancebattle}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_restart
            {pause_panel set exit_destination exit_restart}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_quit
            {pause_panel set exit_destination exit_quit}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_campaign_quit
            {pause_panel set exit_destination exit_quit}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_party_mode_quit
            {pause_panel set exit_destination exit_quit_infinite_party_mode}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_mainmenu
            {pause_panel set exit_destination exit_mainmenu}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_skip
            {if
               {gamemode in_mode playlist_perform}
               {ui goto_screen confirm_skip_screen}})
         (options
            {ui goto_screen party_mode_options_screen})
         (natal_guide
            {gesture_mgr show_gesture_guide})
         (natal_troubleshooter
            {platform_mgr show_controller_required $this}
            skip_select_anim)
         (pausecommand_challenge_quit
            {pause_panel set exit_destination exit_quit_challenge}
            {ui goto_screen confirm_quit_screen})
         (pausecommand_game_guide
            {game_guide_screen
               set
               back
               {ui current_screen}}
            {ui goto_screen game_guide_screen})})
   (controller_req_op_complete
      ($success)
      {if
         {== $success TRUE}
         {if_else
            {platform_mgr is_guide_showing}
            {set
               [pending_show_kinect_tuner]
               TRUE}
            {$this show_kinect_tuner}}})
   (show_kinect_tuner
      {gesture_mgr show_gesture_troubleshooter})
   (UI_CHANGED_MSG
      {if
         [pending_show_kinect_tuner]
         {set
            [pending_show_kinect_tuner]
            FALSE}
         {$this show_kinect_tuner}})
   (on_start_restart
      {if
         {==
            [exit_destination]
            exit_restart}
         {dialog_panel fade_out}})
   (on_restart
      {meta_performer handle_song_restart}
      {game_panel end_game kRestart})
   (on_quit
      {if
         {!=
            [exit_destination]
            exit_restart}
         {songseq do_next TRUE}}
      {set
         [chose_quit]
         TRUE}
      {switch
         [exit_destination]
         (exit_quit
            {game_panel end_game kQuit}
            {ui pop_screen meta_loading_pause_new_song_screen})
         (exit_quit_challenge
            {game_panel end_game kQuit}
            {ui pop_screen meta_loading_perform_cleanup_screen})
         (exit_quit_infinite_party_mode
            {game_panel end_game kQuit}
            {ui pop_screen meta_loading_infinite_party_hub_screen})
         (exit_restart
            {$this on_restart})
         (exit_practice
            {if_else
               {&&
                  {==
                     {player_provider_1 get player_present}
                     TRUE}
                  {==
                     {player_provider_2 get player_present}
                     TRUE}}
               {ui goto_screen pause_practice_confirm_screen}
               {$pause_screen handle_practice_selected}})
         (exit_perform
            {$pause_screen handle_perform_selected})
         (exit_dancebattle
            {$pause_screen handle_dancebattle_selected})
         (exit_mainmenu
            {cond
               ({hamprovider get is_in_party_mode}
                  {exit_party_mode})
               ({hamprovider get is_in_infinite_party_mode}
                  {exit_infinite_party_mode})}
            {game_panel end_game kQuit}
            {ui pop_screen meta_loading_main_screen})})
   (on_voice_command
      ($command)
      {print
         "pause_panel: on_voice_command "
         $command
         "\n"}
      {switch
         $command
         (pausecommand_kinect_tuner
            {helpbar select_left_list_item 0})
         (pausecommand_kinect_guide
            {helpbar select_left_list_item 1})
         {$this select_right_list_token $command}})
   (on_global_voice_command
      ($command)
      {print
         "----- pause_panel handling global voice command "
         $command
         "\n"}
      {switch
         $command
         (hidden_global_main
            {$this select_right_list_token pausecommand_mainmenu})
         {on_global_voice_command $command}})
   (check_letterbox_on_enter
      {if
         [blacklight_on_enter]
         {letterbox sync_to_panel $this}
         {if
            {!
               {ui is_blacklight_mode}}
            {ui toggle_letterbox}}
         {set
            [blacklight_on_enter]
            FALSE}})}
{new
   HamScreen
   perform_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {pause_panel
         set_provider
         {pause_panel find perform.hnp}}
      {voice_input_panel activate_voice_context pause_screen}
      {pause_panel check_letterbox_on_enter})
   (handle_practice_selected
      {ui force_letterbox_off}
      {gamemode set_mode practice}
      {if_else
         {game_panel is_game_over}
         {do
            {print
               "game is over"}}
         {print
            "game is not over"}}
      {set $enter_practice_tutorial_from_pause TRUE}
      {ui pop_screen practice_transition_screen})}
{new
   HamScreen
   practice_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {pause_panel
         set_provider
         {pause_panel find practice.hnp}}
      {voice_input_panel activate_voice_context pause_screen}
      {pause_panel check_letterbox_on_enter})
   (handle_perform_selected
      {gamemode set_mode perform}
      {set $enter_practice_tutorial_from_pause TRUE}
      {if
         $hamdirector
         {$hamdirector reselect_world_postproc}}
      {ui pop_screen loading_screen})}
{new
   HamScreen
   playlist_perform_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {pause_panel
         set_provider
         {pause_panel find playlist_perform.hnp}}
      {voice_input_panel activate_voice_context pause_screen}
      {pause_panel check_letterbox_on_enter})}
{new
   HamScreen
   campaign_perform_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {cond
         ({==
               {hamprovider get gameplay_mode}
               mind_control}
            {pause_panel
               set_provider
               {pause_panel find campaign_perform_mindcontrol.hnp}})
         ({&&
               {==
                  {meta_performer get_era}
                  era_tan_battle}
               {==
                  {hamprovider get gameplay_mode}
                  rhythm_battle}}
            {pause_panel
               set_provider
               {pause_panel find campaign_perform_playlist.hnp}})
         ({==
               {meta_performer get_era}
               era_tan_battle}
            {pause_panel
               set_provider
               {pause_panel find campaign_perform_tan.hnp}})
         ({'||'
               {meta_performer has_playlist}
               {!
                  {songseq empty}}
               {hamprovider get in_campaign_era_intro}}
            {pause_panel
               set_provider
               {pause_panel find campaign_perform_playlist.hnp}})
         {pause_panel
            set_provider
            {pause_panel find campaign_perform.hnp}}}
      {voice_input_panel activate_voice_context pause_screen}
      {pause_panel check_letterbox_on_enter})
   (handle_practice_selected
      {ui force_letterbox_off}
      {gamemode set_mode campaign_practice}
      {set $enter_practice_tutorial_from_pause TRUE}
      {ui pop_screen practice_transition_screen})}
{new
   HamScreen
   campaign_practice_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {pause_panel
         set_provider
         {pause_panel find campaign_practice.hnp}}
      {voice_input_panel activate_voice_context pause_screen}
      {pause_panel check_letterbox_on_enter})
   (handle_perform_selected
      {if_else
         {meta_performer is_campaign_intro_complete}
         {gamemode set_mode campaign_perform}
         {if_else
            {==
               {meta_performer get_era}
               {meta_performer tan_battle_era}}
            {gamemode set_mode campaign_outro}
            {gamemode set_mode campaign_intro}}}
      {set $enter_practice_tutorial_from_pause TRUE}
      {if
         $hamdirector
         {$hamdirector reselect_world_postproc}}
      {ui pop_screen loading_screen})}
{new
   HamScreen
   dancebattle_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {pause_panel
         set_provider
         {pause_panel find dance_battle.hnp}}
      {voice_input_panel activate_voice_context pause_screen}
      {pause_panel check_letterbox_on_enter})}
{new
   HamScreen
   party_mode_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {pause_panel
         set_provider
         {pause_panel find crew_showdown_game.hnp}}
      {voice_input_panel activate_voice_context pause_screen}
      {pause_panel check_letterbox_on_enter})}
{new
   HamScreen
   infinite_party_mode_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (timer -1.0)
   (time 180.0)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {pause_panel
         set_provider
         {pause_panel find party_mode_game.hnp}}
      {set
         [timer]
         [time]}
      {voice_input_panel activate_voice_context pause_screen}
      {pause_panel check_letterbox_on_enter})
   (poll
      {if_else
         {&&
            {!
               {hamprovider get has_skeleton}}
            {!
               {shell_input in_controller_mode}}}
         {do
            {-=
               [timer]
               {taskmgr ui_delta_seconds}}
            {if
               {<=
                  [timer]
                  0}
               {game_panel end_game kQuit}
               {ui pop_screen meta_loading_infinite_party_hub_screen}}}
         {do
            {set
               [timer]
               [time]}}})}
#define CONFIRM_QUIT_HANDLERS
((panels background_confirmation_panel dialog_panel)
   (focus dialog_panel)
   (helpbar
      ((confirm helpbar_confirm)))
   (is_restart
      {==
         {pause_panel get exit_destination}
         exit_restart})
   (blacklight_on_enter FALSE))
{new
   HamScreen
   confirm_quit_screen
   CONFIRM_QUIT_HANDLERS
   (enter DX_NO_MENU_MOTIONBLUR
      {if_else
         {$this is_restart}
         {dialog_panel set_ok_no confirm_restart TRUE}
         {if_else
            {hamprovider get finale}
            {dialog_panel set_ok_no confirm_quit_finale TRUE}
            {if_else
               {==
                  {pause_panel get exit_destination}
                  exit_mainmenu}
               {dialog_panel set_ok_no confirm_quit_mainmenu TRUE}
               {dialog_panel set_ok_no confirm_quit TRUE}}}}
      {if
         [blacklight_on_enter]
         {letterbox sync_to_panel dialog_panel}
         {if
            {!
               {ui is_blacklight_mode}}
            {ui toggle_letterbox}}
         {set
            [blacklight_on_enter]
            FALSE}})
   (do_quit
      {if
         {$this is_restart}
         {ui force_letterbox_off}}
      {wave_to_turn_on_light disable_wave_state}
      {pause_panel on_quit})
   (handle_select_msg
      ($name)
      {switch
         $name
         (ok
            {$this do_quit})
         (no
            {if_else
               {hamprovider get is_in_party_mode}
               {ui goto_screen party_mode_pause_screen}
               {if_else
                  {hamprovider get is_in_infinite_party_mode}
                  {ui goto_screen infinite_party_mode_pause_screen}
                  {ui
                     go_back_screen
                     {gamemode get pause_screen}}}})
         (restart_select_start
            {pause_panel on_start_restart})})
   (NAV_SELECT_MSG
      {if_else
         {'||'
            {== $name no}
            {!
               {$this is_restart}}}
         {$this handle_select_msg $name}
         {$this handle_select_msg restart_select_start}})
   (NAV_SELECT_DONE_MSG
      {if
         {&&
            {== $name ok}
            {$this is_restart}}
         {$this handle_select_msg $name}})}
{new
   HamScreen
   confirm_skip_screen
   (panels background_confirmation_panel dialog_panel)
   (focus dialog_panel)
   (helpbar
      ((confirm helpbar_confirm)))
   (enter DX_NO_MENU_MOTIONBLUR
      {dialog_panel set_ok_no confirm_skip TRUE})
   (handle_select_msg
      ($name)
      {switch
         $name
         (ok
            {game_panel end_game kQuit}
            {player_provider_1 set score 0}
            {player_provider_2 set score 0}
            {game_panel set score 0}
            {meta_performer handle_skipped_song}
            {hamprovider set skipped_song TRUE}
            {goto_win_screen FALSE}
            {print
               "pause.dta triggered win_transition_screen\n"})
         (no
            {ui
               go_back_screen
               {gamemode get pause_screen}})})
   (NAV_SELECT_MSG
      {$this handle_select_msg $name})}
{new
   HamScreen
   pause_practice_confirm_screen
   (panels background_confirmation_panel dialog_panel)
   (focus dialog_panel)
   (enter DX_NO_MENU_MOTIONBLUR
      {dialog_panel set_ok_no confirm_practice TRUE})
   (NAV_SELECT_MSG
      {switch
         $name
         (ok
            {$pause_screen handle_practice_selected})
         (no
            {ui
               go_back_screen
               {gamemode get pause_screen}})})}
#define SHELL_PAUSE_PANEL_HANDLERS
((return_focus_panel
      "")
   (return_showing_panels
      ())
   (return_unpaused_panels
      ())
   (return_voice_context
      "")
   (show_options_panel
      {set
         [return_focus_panel]
         {$this focus_panel}}
      {{ui current_screen}
         foreach_panel
         $panel
         {if
            {$panel showing}
            {push_back
               [return_showing_panels]
               $panel}
            {$panel set_showing FALSE}}
         {if
            {&&
               {!
                  {$panel paused}}
               {!= $panel shell_pause_panel}}
            {push_back
               [return_unpaused_panels]
               $panel}
            {$panel set_paused TRUE}}}
      {shell_pause_panel set_showing TRUE}
      {if_else
         {$this
            has
            (shell_pause_return_time)}
         {shell_pause_panel
            set_return_time
            [shell_pause_return_time]}
         {shell_pause_panel set_return_time -1.0}}
      {$this set_focus_panel shell_pause_panel}
      {letterbox sync_to_panel shell_pause_panel}
      {helpbar sync_to_panel shell_pause_panel}
      {shell_pause_panel use_postproc_as_override}
      {set
         [return_voice_context]
         {voice_input_panel active_voice_context_sym}}
      {voice_input_panel activate_voice_context pause_screen}
      {$this on_show_options_panel}
      {hamprovider set is_in_shell_pause TRUE})
   (hide_options_panel
      {foreach
         $panel
         [return_showing_panels]
         {$panel set_showing TRUE}}
      {foreach
         $panel
         [return_unpaused_panels]
         {$panel set_paused FALSE}}
      {shell_pause_panel set_showing FALSE}
      {hamprovider set is_in_shell_pause FALSE}
      {$this
         set_focus_panel
         [return_focus_panel]}
      {letterbox
         sync_to_panel
         [return_focus_panel]}
      {helpbar
         sync_to_panel
         [return_focus_panel]}
      {set
         [return_focus_panel]
         ""}
      {shell_pause_panel override_postproc ''}
      {voice_input_panel
         activate_voice_context
         [return_voice_context]}
      {$this on_hide_options_panel})
   #ifdef HX_XBOX
   (KINECT_GUIDE_GESTURE_MSG
      {if_else
         {shell_pause_panel showing}
         kDataUnhandled
         {$this show_options_panel}})
   #endif)
{new
   HamPanel
   shell_pause_panel
   (file
      "../pause/pause.milo")
   (focus right_hand.hnl)
   (back_token natal_guide)
   (show_back_controller_icon FALSE)
   (tertiary_token natal_troubleshooter)
   (back_token natal_guide)
   (return_time 0.0)
   (return_timer 0.0)
   (handle_global_commands TRUE)
   (enter DX_NO_MENU_MOTIONBLUR
      {$this
         set_showing
         {==
            {ui focus_panel}
            $this}}
      {set
         [return_timer]
         -1.0}
      {if
         {==
            {{ui current_screen}
               focus_panel}
            $this}
         {voice_input_panel activate_voice_context pause_screen}}
      {$this override_postproc ''})
   SELECT_RIGHT_LIST_TOKEN
   (poll
      SLIDE_RIGHT_LIST_ITEM
      {if
         {>
            [return_timer]
            0.0}
         {if_else
            {&&
               {!
                  {hamprovider get has_skeleton}}
               {!
                  {shell_input in_controller_mode}}}
            {do
               {-=
                  [return_timer]
                  {taskmgr ui_delta_seconds}}
               {if
                  {<=
                     [return_timer]
                     0.0}
                  {{ui current_screen}
                     hide_options_panel}}}
            {do
               {set
                  [return_timer]
                  [return_time]}}}})
   (NAV_SELECT_DONE_MSG
      {switch
         $name
         (pausecommand_resume
            {if_else
               {==
                  {ui current_screen}
                  shell_pause_screen}
               {do
                  {hamprovider set is_in_shell_pause FALSE}
                  {ui goto_screen infinite_party_hub_screen}}
               {{ui current_screen}
                  hide_options_panel}})
         (pausecommand_party_mode_options
            {party_mode_options_screen
               set
               back_screen
               {ui current_screen}}
            {ui goto_screen party_mode_options_screen})
         (pausecommand_mainmenu
            {shell_confirm_quit_screen
               set
               back_screen
               {ui current_screen}}
            {ui goto_screen shell_confirm_quit_screen})
         (pausecommand_game_guide
            {game_guide_screen
               set
               back
               {ui current_screen}}
            {ui goto_screen game_guide_screen})
         (natal_guide
            {gesture_mgr show_gesture_guide})
         (natal_troubleshooter
            {platform_mgr show_controller_required $this}
            skip_select_anim)})
   (on_voice_command
      ($command)
      {$this select_right_list_token $command})
   (on_global_voice_command
      ($command)
      {print
         "shell_pause_panel: on_global_voice_command "
         $command
         "\n"}
      {switch
         $command
         (hidden_global_main
            {$this select_right_list_token pausecommand_mainmenu})
         (hidden_global_options
            {$this select_right_list_token pausecommand_party_mode_options})
         {on_global_voice_command $command}})
   (set_provider
      ($provider)
      {right_hand.hnl set_provider $provider})
   (set_return_time
      ($time)
      {set
         [return_time]
         $time}
      {set
         [return_timer]
         $time})}
{new
   HamScreen
   shell_pause_screen
   (panels background_panel shell_pause_panel)
   (focus shell_pause_panel)
   (enter DX_NO_MENU_MOTIONBLUR
      {hamprovider set is_in_shell_pause TRUE}
      {shell_pause_panel
         set_provider
         {shell_pause_panel find party_mode_shell.hnp}})}
{new
   HamScreen
   shell_confirm_quit_screen
   (panels background_confirmation_panel dialog_panel)
   (focus dialog_panel)
   (helpbar
      ((confirm helpbar_confirm)))
   (back_screen)
   (enter DX_NO_MENU_MOTIONBLUR
      {dialog_panel set_ok_no confirm_quit_mainmenu TRUE})
   (NAV_SELECT_MSG
      {switch
         $name
         (no
            {ui
               goto_screen
               [back_screen]})
         (ok
            {if
               [back_screen]
               {[back_screen]
                  hide_options_panel}}
            {if
               {hamprovider get is_in_party_mode}
               {exit_party_mode}}
            {if
               {hamprovider get is_in_infinite_party_mode}
               {exit_infinite_party_mode}}
            {ui goto_screen main_screen})})
   (on_voice_command
      ($command)
      {dialog_panel select_right_list_token $command})}
{new
   HamScreen
   challenge_perform_pause_screen
   (panels background_pause_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set $pause_screen $this}
      {pause_panel
         set_provider
         {pause_panel find challenge_perform.hnp}}
      {pause_panel check_letterbox_on_enter}
      {voice_input_panel activate_voice_context pause_screen})
   (handle_practice_selected
      {ui force_letterbox_off}
      {gamemode set_mode practice}
      {set $enter_practice_tutorial_from_pause TRUE}
      {ui pop_screen practice_transition_screen})}
{new
   HamPanel
   game_guide_panel
   (file
      "game_guide.milo")
   (focus right_hand.hnl)
   (hide_helpbar
      {shell_input in_controller_mode})
   (helpbar_allow_controller TRUE)
   (back_token back)
   SELECT_RIGHT_LIST_TOKEN
   (poll SLIDE_RIGHT_LIST_ITEM)
   (NAV_SELECT_MSG
      {switch
         $name
         (game_guide_controls
            {options_controls_screen
               set
               back
               {ui current_screen}}
            {ui goto_screen options_controls_screen})
         (tutorials
            {options_tutorials_screen
               set
               back
               {ui current_screen}}
            {ui goto_screen options_tutorials_screen})
         (back
            {ui
               go_back_screen
               {{ui current_screen}
                  get
                  back}})})
   (BUTTON_DOWN_MSG
      {switch
         $action
         ((kAction_Cancel)
            {ui
               go_back_screen
               {{ui current_screen}
                  get
                  back}})
         kDataUnhandled})}
{new
   HamScreen
   game_guide_screen
   (panels meta background_panel game_guide_panel)
   (focus game_guide_panel)
   (back pause_screen)
   (enter DX_NO_MENU_MOTIONBLUR
      {voice_input_panel activate_voice_context game_guide_screen})
   (on_voice_command
      ($command)
      {switch
         $command
         BACRO
         {game_guide_panel select_right_list_token $command}})}