{new
   UIPanel
   meta_game
   (hide_letterbox TRUE)
   (poll
      {do
         ($music
            {meta meta_music})
         {if_else
            $music
            {$music poll}
            0}})
   (exiting
      {do
         ($music
            {meta meta_music})
         {if_else
            $music
            {$music is_active}
            0}})}
{new
   MetaPanel
   meta
   (playing_post_set FALSE)
   (is_crowd_playing FALSE)
   (load
      {if
         {&&
            {==
               {ui bottom_screen}
               {ui current_screen}}
            {!
               {==
                  {ui transition_screen}
                  practice_welcome_screen}}}
         {do
            {print
               "!! MetaPanel now loading multiuser_panel. {ui transition_screen} = "
               {ui transition_screen}
               "\n"}
            {multiuser_panel load}}})
   (unload
      {if
         {&&
            {==
               {ui bottom_screen}
               {ui current_screen}}
            {!
               {==
                  {ui transition_screen}
                  practice_welcome_screen}}}
         {multiuser_panel unload}})
   (finish_load)
   (enter DX_NO_MENU_MOTIONBLUR
      {set
         [playing_post_set]
         FALSE})
   (exit
      {set
         [is_crowd_playing]
         FALSE}
      {$this music_stop})
   (music_start
      {do
         ($music
            {$this meta_music})
         {if
            {! $mute_shell_music}
            {if
               $music
               {$music start}}
            {hamprovider set shellmusic_on TRUE}
            {unless
               [is_crowd_playing]
               {set
                  [is_crowd_playing]
                  TRUE}}
            {platform_mgr enable_xmp}}})
   (music_stop
      {do
         ($music
            {$this meta_music})
         {hamprovider set shellmusic_on FALSE}
         {if
            $music
            {$music stop}}
         {set
            [is_crowd_playing]
            FALSE}
         {platform_mgr disable_xmp}})
   (play_postset_loop
      ($play)
      {set
         [playing_post_set]
         $play})}
#define COMMON_DIALOG_PANEL_HANDLERS
((focus right_hand.hnl)
   (dialog_type dlg_ok)
   (setup_voice
      ($allow)
      {if_else
         $allow
         {do
            {$this set allow_voice_control TRUE}
            {voice_input_panel activate_voice_context dialog_confirm_screen}}
         {do
            {$this set allow_voice_control FALSE}
            {voice_input_panel activate_voice_context ''}}})
   (set_ok
      ($msg $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_1btn.hnp}
      {provider_1btn.hnp set_label 0 ok}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_ok})
   (set_custom_ok
      ($msg $opt1 $focus_index $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_1btn.hnp}
      {right_hand.hnl scroll_to_index $focus_index $focus_index}
      {provider_1btn.hnp set_label 0 $opt1}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_ok})
   (set_ok_no
      ($msg $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_2btn.hnp}
      {provider_2btn.hnp set_label 0 ok}
      {provider_2btn.hnp set_label 1 no}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_ok_no})
   (set_custom_ok_no
      ($msg $opt1 $opt2 $focus_index $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_2btn.hnp}
      {right_hand.hnl scroll_to_index $focus_index $focus_index}
      {provider_2btn.hnp set_label 0 $opt1}
      {provider_2btn.hnp set_label 1 $opt2}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_ok_no})
   (set_continue
      ($msg $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_1btn.hnp}
      {provider_1btn.hnp set_label 0 continue}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_cont})
   (set_custom_continue
      ($msg $opt1 $focus_index $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_1btn.hnp}
      {right_hand.hnl scroll_to_index $focus_index $focus_index}
      {provider_1btn.hnp set_label 0 $opt1}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_cont})
   (set_continue_no
      ($msg $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_2btn.hnp}
      {provider_2btn.hnp set_label 0 continue}
      {provider_2btn.hnp set_label 1 no}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_cont_no})
   (set_custom_continue_no
      ($msg $opt1 $opt2 $focus_index $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_2btn.hnp}
      {right_hand.hnl scroll_to_index $focus_index $focus_index}
      {provider_2btn.hnp set_label 0 $opt1}
      {provider_2btn.hnp set_label 1 $opt2}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_cont_no})
   (set_ok_no_later
      ($msg $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_3btn.hnp}
      {provider_3btn.hnp set_label 0 ok}
      {provider_3btn.hnp set_label 1 no}
      {provider_3btn.hnp set_label 2 never}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_ok_no_later})
   (set_custom_ok_no_later
      ($msg $opt1 $opt2 $opt3 $allow_voice)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_3btn.hnp}
      {provider_3btn.hnp set_label 0 $opt1}
      {provider_3btn.hnp set_label 1 $opt2}
      {provider_3btn.hnp set_label 2 $opt3}
      {$this setup_voice $allow_voice}
      {set
         [dialog_type]
         dlg_ok_no_later})
   (set_msg
      ($msg)
      {msg.lbl
         set_token_fmt
         $msg
         ()}
      {right_hand.hnl set nav_provider provider_0btn.hnp})
   (NAV_HIGHLIGHT_MSG 0)
   (NAV_HIGHLIGHT_SETTLED_MSG 0)
   (on_voice_command
      ($command)
      {switch
         [dialog_type]
         (dlg_ok
            {switch
               $command
               (ok
                  {$this select_right_list_item 0})})
         (dlg_ok_no
            {switch
               $command
               (ok
                  {$this select_right_list_item 0})
               (no
                  {$this select_right_list_item 1})})
         (dlg_cont
            {switch
               $command
               (continue
                  {$this select_right_list_item 0})})
         (dlg_cont_no
            {switch
               $command
               (continue
                  {$this select_right_list_item 0})
               (no
                  {$this select_right_list_item 1})})
         (dlg_ok_no_later
            {switch
               $command
               (ok
                  {$this select_right_list_item 0})
               (no
                  {$this select_right_list_item 1})
               (later
                  {$this select_right_list_item 2})})}))
{new
   HamPanel
   dialog_panel
   COMMON_DIALOG_PANEL_HANDLERS
   (file
      "dialog.milo")
   (show_hand_help FALSE)
   (use_gamertag_bg TRUE)
   (allow_voice_control TRUE)
   SELECT_RIGHT_LIST_TOKEN
   (poll SLIDE_RIGHT_LIST_ITEM)
   (fade_out
      {fade_out.flow activate})}
{new
   EventDialogPanel
   event_dialog_panel
   (file
      "event_dialog.milo")
   (show_hand_help FALSE)
   (use_gamertag_bg TRUE)}
{new
   ContentLoadingPanel
   content_loading_panel
   (file content_loading.milo)}
{new
   CursorPanel
   cursor_panel
   (file
      "cursor.milo")
   (message_dir cursor_panel)
   (change_depth_colors_to_wrangler
      {depth_buffer_left.sr
         set
         player1_depth_color
         {player1_left_alt.color get color}}
      {depth_buffer_left.sr
         set
         player2_depth_color
         {player2_left_alt.color get color}}
      {depth_buffer_left.sr
         set
         player3_depth_color
         {player3_left_alt.color get color}}
      {depth_buffer_left.sr
         set
         player4_depth_color
         {player4_left_alt.color get color}}
      {depth_buffer_left.sr
         set
         player5_depth_color
         {player5_left_alt.color get color}}
      {depth_buffer_left.sr
         set
         player6_depth_color
         {player6_left_alt.color get color}}
      {depth_buffer_right.sr
         set
         player1_depth_color
         {player1_right_alt.color get color}}
      {depth_buffer_right.sr
         set
         player2_depth_color
         {player2_right_alt.color get color}}
      {depth_buffer_right.sr
         set
         player3_depth_color
         {player3_right_alt.color get color}}
      {depth_buffer_right.sr
         set
         player4_depth_color
         {player4_right_alt.color get color}}
      {depth_buffer_right.sr
         set
         player5_depth_color
         {player5_right_alt.color get color}}
      {depth_buffer_right.sr
         set
         player6_depth_color
         {player6_right_alt.color get color}})
   (change_depth_colors_to_normal
      {depth_buffer_left.sr
         set
         player1_depth_color
         {player1_left_norm.color get color}}
      {depth_buffer_left.sr
         set
         player2_depth_color
         {player2_left_norm.color get color}}
      {depth_buffer_left.sr
         set
         player3_depth_color
         {player3_left_norm.color get color}}
      {depth_buffer_left.sr
         set
         player4_depth_color
         {player4_left_norm.color get color}}
      {depth_buffer_left.sr
         set
         player5_depth_color
         {player5_left_norm.color get color}}
      {depth_buffer_left.sr
         set
         player6_depth_color
         {player6_left_norm.color get color}}
      {depth_buffer_right.sr
         set
         player1_depth_color
         {player1_right_norm.color get color}}
      {depth_buffer_right.sr
         set
         player2_depth_color
         {player2_right_norm.color get color}}
      {depth_buffer_right.sr
         set
         player3_depth_color
         {player3_right_norm.color get color}}
      {depth_buffer_right.sr
         set
         player4_depth_color
         {player4_right_norm.color get color}}
      {depth_buffer_right.sr
         set
         player5_depth_color
         {player5_right_norm.color get color}}
      {depth_buffer_right.sr
         set
         player6_depth_color
         {player6_right_norm.color get color}})
   (reset_sided_colors
      {reset_sided_depth_colors.flow activate})
   (reset_normal_colors
      {reset_normal_depth_colors.flow activate})
   (reset_silhouettes
      {reset_silhouettes.flow activate})}
{new
   HelpBarPanel
   helpbar
   (file
      "helpbar.milo")
   (controller_mode_timeout 5000)
   SELECT_LEFT_LIST_ITEM
   (poll SLIDE_LEFT_LIST_ITEM)
   (scroll_tertiary
      ($amt)
      {left_hand.hnl scroll_sublist 0 $amt})
   (scroll_tertiary_to_index
      ($idx)
      {left_hand.hnl scroll_sublist_to_index 0 $idx})}
{new
   LetterboxPanel
   letterbox
   (file
      "letterbox/letterbox.milo")
   (blacklight_timeout 13000)
   (hidden_commands '')
   (on_toggle_blacklight
      ($on)
      {voice_input_panel toggle_blacklight $on})
   (set_ticker_commands
      ($commands)
      {set
         $command_string
         ""}
      {set
         $num_commands
         {size $commands}}
      {foreach_int
         $i
         1
         $num_commands
         {set
            $command_string
            {sprint
               $command_string
               {localize
                  {elem $commands $i}}
               "     "}}}
      {blklight_motd.lbl set_prelocalized_string $command_string}
      {set
         [hidden_commands]
         $commands})
   (has_hidden_command
      ($command)
      {find_elem
         [hidden_commands]
         $command})}
{new
   BlacklightPanel
   blacklight
   (file
      "letterbox/blacklight.milo")
   (hidden_commands '')
   (on_toggle_blacklight
      ($on))}
{new
   VoiceInputPanel
   voice_input_panel
   (exit_complete
      {print
         "exit complete voice_input_panel\n"})
   (load
      {print
         "loading voice_input_panel\n"}
      {ui add_sink $this})
   (unload
      {print
         "unloading voice_input_panel\n"}
      {ui remove_sink $this})
   (finish_load
      {print
         "load finished voice_input_panel\n"})
   (enter DX_NO_MENU_MOTIONBLUR
      {print
         "entering voice_input_panel\n"})
   (exit
      {print
         "exiting voice_input_panel\n"})
   (poll)
   (select_song_by_index
      ($index)
      {{ui current_screen}
         select_song_by_index
         $index})
   (on_say_song_name
      ($song_name)
      {{ui current_screen}
         on_say_song_name
         $song_name})
   (select_playlist_song
      ($song_name)
      {{ui current_screen}
         select_playlist_song
         $song_name})
   (refresh_sorting
      ($current_selection)
      {song_select_screen do_sort $current_selection})
   (on_voice_command
      ($command)
      {if
         {!=
            {ui current_screen}
            NULL}
         {{ui current_screen}
            on_voice_command
            $command}})
   (on_global_voice_command
      ($command)
      {if
         {!=
            {ui current_screen}
            NULL}
         {{ui current_screen}
            on_global_voice_command
            $command}})}
#define SONG_SELECT_GRAMMAR_ENTER_COMMON
({letterbox
      add_sink
      $this
      (enter_blacklight_mode)}
   {letterbox
      add_sink
      $this
      (exit_blacklight_mode)}
   {voice_input_panel create_song_select_grammar}
   {speech_mgr set_rule song_select_grammar select_song TRUE})
#define SONG_SELECT_GRAMMAR_EXIT_COMMON
({letterbox remove_sink $this enter_blacklight_mode}
   {letterbox remove_sink $this exit_blacklight_mode}
   {speech_mgr set_rule song_select_grammar select_song FALSE})
#define SONG_SELECT_GRAMMAR_TOGGLE_BLACKLIGHT_COMMON
((enter_blacklight_mode
      {voice_input_panel create_song_select_grammar}
      {speech_mgr set_rule song_select_grammar select_song TRUE}
      {if
         {exists right_hand.hnl}
         {right_hand.hnl refresh}})
   (exit_blacklight_mode
      {voice_input_panel create_song_select_grammar}
      {speech_mgr set_rule song_select_grammar select_song TRUE}
      {if
         {exists right_hand.hnl}
         {right_hand.hnl refresh}}))
{new
   HamPanel
   song_info_panel
   (file
      "song_info.milo")
   (song_name '')
   (showing_full FALSE)
   (pending_song none)
   (song_list_mode TRUE)
   (playlist_mode FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {if_else
         {!=
            [pending_song]
            none}
         {$this
            set_song
            [pending_song]}
         {$this
            set_song
            {gamedata get song}}}
      {$this show_full_song_details}
      {$this set pending_song none}
      {meta music_stop}
      {ui
         add_sink
         $this
         (song_data_mounted)})
   (exit
      {song_preview start ''}
      {if
         {!
            {gamemode in_mode campaign}}
         {meta music_start}}
      {$this set playlist_mode FALSE}
      {ui remove_sink $this song_data_mounted})
   (set_song_list_mode
      ($enabled)
      {$this set song_list_mode $enabled}
      {if
         {$this is_up}
         {if_else
            {!=
               [song_name]
               ''}
            {$this refresh_song_details}
            {$this clear_song_details}}})
   (song_data_mounted
      ($song)
      {if
         {==
            $song
            [song_name]}
         {$this refresh_album_art}})
   (set_song
      ($song)
      {if_else
         {$this is_up}
         {do
            {$this set song_name $song}
            {$this hide_full_song_details}
            {if_else
               {!=
                  [song_name]
                  ''}
               {$this refresh_song_details}
               {$this clear_song_details}}}
         {do
            {$this set pending_song $song}}})
   (show_full_song_details
      {$this set showing_full TRUE}
      {$this play_song_preview}
      {$this refresh_album_art})
   (hide_full_song_details
      {$this set showing_full FALSE}
      {$this stop_song_preview}
      {$this refresh_album_art})
   (refresh_song_details
      {do
         ($songid
            {song_mgr
               get_song_id
               [song_name]})
         {print
            "meta.dta 332: refresh_song_details\n"}
         {song.lbl
            set_song_name
            [song_name]}
         {song.lbl
            set
            showing
            {!
               [song_list_mode]}}
         {album.lbl
            set_album_name
            [song_name]}
         {if_else
            {&&
               [song_list_mode]
               {==
                  {song_offer_provider get_current_sort_name}
                  by_artist}}
            {artist.lbl
               set_song_name
               [song_name]}
            {artist.lbl
               set_artist_name
               [song_name]}}
         {intensity.sdd set showing TRUE}
         {intensity.lbl set showing TRUE}
         {intensity.sdd
            set_level
            {song_mgr
               rank_tier_for_song
               [song_name]}}
         {dancer.lbl
            set_token_fmt
            song_dancer
            {song_mgr
               dancer_for_song
               [song_name]}}})
   (clear_song_details
      {do
         {song.lbl set text_token ''}
         {album.lbl set text_token ''}
         {artist.lbl set text_token ''}
         {intensity.sdd set showing FALSE}
         {intensity.lbl set showing FALSE}
         {dancer.lbl set text_token ''}})
   (refresh_album_art
      {do
         ($pic
            {album_art find album_art.pic})
         {if_else
            {&&
               {!=
                  [song_name]
                  ''}
               [showing_full]}
            {do
               ($content_name
                  {song_mgr
                     content_name_from_sym
                     [song_name]})
               {if_else
                  {'||'
                     {==
                        $content_name
                        ""}
                     {content_mgr is_mounted $content_name}}
                  {$pic
                     set
                     tex_file
                     {song_mgr
                        album_art_path
                        [song_name]}}
                  {$pic
                     set
                     tex_file
                     "ui/image/dc_logo_keep.png"}}}
            {$pic
               set
               tex_file
               "ui/image/dc_logo_keep.png"}}})
   (restart_preview_flow
      {preview.flow activate})
   (play_song_preview
      {song_preview
         start_video
         [song_name]
         preview.tmov}
      {preview.flow activate})
   (stop_song_preview
      {song_preview start_video '' preview.tmov}
      {preview.flow request_stop})}
{new
   HamPanel
   infinite_party_mode_timeout_panel
   (timeout_time 150.0)
   (timer -1.0)
   (enter DX_NO_MENU_MOTIONBLUR
      {$this reset_timer})
   (poll
      {if
         {>
            [timer]
            0.0}
         {if_else
            {&&
               {!
                  {hamprovider get has_skeleton}}
               {!
                  {shell_input in_controller_mode}}}
            {do
               {-=
                  [timer]
                  {taskmgr ui_delta_seconds}}
               {if
                  {<=
                     [timer]
                     0.0}
                  {infinite_party_hub_screen hide_options_panel}
                  {ui goto_screen infinite_party_hub_screen}}}
            {$this reset_timer}}})
   (reset_timer
      {set
         [timer]
         [timeout_time]})
   (set_timeout_time
      ($time)
      {set
         [timeout_time]
         $time})}
{new
   HamPanel
   sync_party_with_rc_panel
   (file
      "")
   (focus right_hand.hnl)
   (options_rdy FALSE)
   (song_queue_rdy FALSE)
   (next_screen '')
   (enter_time 0)
   (min_time 3000)
   (helpbar_allow_controller FALSE)
   (allow_voice_control FALSE)
   (enter DX_NO_MENU_MOTIONBLUR
      {set
         [options_rdy]
         FALSE}
      {set
         [song_queue_rdy]
         FALSE}
      {partymode_mgr set curr_synced_song_id 0}
      {partymode_mgr send_party_options_to_rc}
      {set
         [enter_time]
         {system_ms}})
   (poll
      {if
         {&&
            [options_rdy]
            [song_queue_rdy]
            {>
               {-
                  {system_ms}
                  [enter_time]}
               [min_time]}}
         {ui
            goto_screen
            [next_screen]}})
   (options_sent
      {partymode_mgr get_party_options_from_rc}
      {partymode_mgr get_party_song_queue_from_rc})
   (options_updated
      {set
         [options_rdy]
         TRUE})
   (song_queue_updated
      {set
         [song_queue_rdy]
         TRUE})
   (skipped_sync
      {set
         [options_rdy]
         TRUE}
      {set
         [song_queue_rdy]
         TRUE})}
{new
   HamPanel
   sync_next_party_with_rc_panel
   (file
      "")
   (focus right_hand.hnl)
   (options_rdy FALSE)
   (song_queue_rdy FALSE)
   (next_screen '')
   (enter DX_NO_MENU_MOTIONBLUR
      {set
         [options_rdy]
         FALSE}
      {set
         [song_queue_rdy]
         FALSE}
      {partymode_mgr set curr_synced_song_id 0}
      {partymode_mgr get_party_options_from_rc}
      {partymode_mgr get_party_song_queue_from_rc})
   (poll
      {if
         {&&
            [options_rdy]
            [song_queue_rdy]}
         {ui
            pop_screen
            [next_screen]}})
   (options_updated
      {set
         [options_rdy]
         TRUE})
   (song_queue_updated
      {set
         [song_queue_rdy]
         TRUE})
   (skipped_sync
      {ui
         pop_screen
         [next_screen]})}
{new
   HamPanel
   fitness_info_panel
   (file
      "fitness/fitness_info.milo")
   (enter DX_NO_MENU_MOTIONBLUR
      {if_else
         {'||'
            {is_active_profile_in_fitness_mode}
            {==
               {ui current_screen}
               fitness_screen}}
         {do
            {$this set_showing TRUE}
            {$this update_all}}
         {do
            {$this set_showing FALSE}}})
   (update_all
      {if_else
         {profile_mgr has_active_profile}
         {do
            ($profile
               {profile_mgr get_active_profile})
            ($stats
               {$profile get_stats})
            ($total_time
               {$stats get_count kCountStat_TotalTimeFitness})
            ($total_calories
               {$stats get_count kCountStat_TotalCaloriesBurned})
            {has_profile.flow activate}
            {gamertag.lbl
               set_user_name
               {$profile get_pad_num}}
            {$profile update_fitness_weight weight.lbl}
            {$profile update_fitness_time time.lbl}
            {calories.lbl
               set_int
               {$profile get_fitness_calories}
               TRUE}
            {$profile update_fitness_total_time total_time.lbl}
            {total_calories.lbl set_int $total_calories TRUE}
            {if_else
               {$profile is_fitness_goal_set}
               {do
                  {goal_period_active.flow activate}
                  {$profile set_fitness_goals_through goals_through.lbl}
                  {$profile set_fitness_goal_days fitness_goal_days.lbl}
                  {$profile set_fitness_goal_calories fitness_goal_calories.lbl}
                  {$profile set_fitness_goal_days_result fitness_goal_days_result.lbl}
                  {$profile set_fitness_goal_calories_result fitness_goal_calories_result.lbl}
                  {if_else
                     {$profile is_fitness_days_goal_met}
                     {goal_days_complete.flow activate}
                     {goal_days_not_met.flow activate}}
                  {if_else
                     {$profile is_fitness_calories_goal_met}
                     {goal_calories_complete.flow activate}
                     {goal_calories_not_met.flow activate}}}
               {do
                  {goal_period_not_set.flow activate}}}}
         {do
            {no_profile.flow activate}}})}
#define MOVIE_PANEL_STUFF
((enter DX_NO_MENU_MOTIONBLUR
      {ui force_letterbox_off}
      {rnd set_postproc_override ''})
   (pause
      {$this set_paused TRUE})
   (unpause
      {$this set_paused FALSE}))
#ifndef _SHIP
{new
   UIPanel
   helpbar_test_panel
   (confirm_state 3)
   (cancel_state 3)
   (option_state 3)
   (start_state 3)
   (view_state 3)
   (up_state 3)
   (right_state 3)
   (left_state 3)
   (down_state 3)
   (update
      {do
         ($config
            {array 0})
         {if_else
            {==
               [confirm_state]
               1}
            {push_back
               $config
               (confirm helpbar_select)}
            {if
               {==
                  [confirm_state]
                  2}
               {push_back
                  $config
                  (confirm helpbar_chosediff)}}}
         {if_else
            {==
               [cancel_state]
               1}
            {push_back
               $config
               (cancel helpbar_select)}
            {if
               {==
                  [cancel_state]
                  2}
               {push_back
                  $config
                  (cancel helpbar_chosediff)}}}
         {if_else
            {==
               [option_state]
               1}
            {push_back
               $config
               (option helpbar_select)}
            {if
               {==
                  [option_state]
                  2}
               {push_back
                  $config
                  (option helpbar_chosediff)}}}
         {if_else
            {==
               [start_state]
               1}
            {push_back
               $config
               (state_confirm helpbar_select)}
            {if
               {==
                  [start_state]
                  2}
               {push_back
                  $config
                  (state_confirm helpbar_chosediff)}}}
         {if_else
            {==
               [view_state]
               1}
            {push_back
               $config
               (view_modify helpbar_select)}
            {if
               {==
                  [view_state]
                  2}
               {push_back
                  $config
                  (view_modify helpbar_chosediff)}}}
         {if_else
            {==
               [up_state]
               1}
            {push_back
               $config
               (option2 helpbar_select)}
            {if
               {==
                  [up_state]
                  2}
               {push_back
                  $config
                  (option2 helpbar_chosediff)}}}
         {if_else
            {==
               [down_state]
               1}
            {push_back
               $config
               (option1 helpbar_select)}
            {if
               {==
                  [down_state]
                  2}
               {push_back
                  $config
                  (option1 helpbar_chosediff)}}}
         {if_else
            {==
               [left_state]
               1}
            {push_back
               $config
               (waiting helpbar_select)}
            {if
               {==
                  [left_state]
                  2}
               {push_back
                  $config
                  (waiting helpbar_chosediff)}}}
         {helpbar set_config $config}})
   (BUTTON_DOWN_MSG
      {do
         {switch
            $action
            ((kAction_Confirm)
               {if_else
                  {==
                     [confirm_state]
                     1}
                  {set
                     [confirm_state]
                     2}
                  {if_else
                     {==
                        [confirm_state]
                        2}
                     {set
                        [confirm_state]
                        3}
                     {set
                        [confirm_state]
                        1}}})
            ((kAction_Cancel)
               {if_else
                  {==
                     [cancel_state]
                     1}
                  {set
                     [cancel_state]
                     2}
                  {if_else
                     {==
                        [cancel_state]
                        2}
                     {set
                        [cancel_state]
                        3}
                     {set
                        [cancel_state]
                        1}}})
            ((kAction_Option)
               {if_else
                  {==
                     [option_state]
                     1}
                  {set
                     [option_state]
                     2}
                  {if_else
                     {==
                        [option_state]
                        2}
                     {set
                        [option_state]
                        3}
                     {set
                        [option_state]
                        1}}})
            ((kAction_Start)
               {if_else
                  {==
                     [start_state]
                     1}
                  {set
                     [start_state]
                     2}
                  {if_else
                     {==
                        [start_state]
                        2}
                     {set
                        [start_state]
                        3}
                     {set
                        [start_state]
                        1}}})
            ((kAction_ViewModify)
               {if_else
                  {==
                     [view_state]
                     1}
                  {set
                     [view_state]
                     2}
                  {if_else
                     {==
                        [view_state]
                        2}
                     {set
                        [view_state]
                        3}
                     {set
                        [view_state]
                        1}}})
            ((kAction_Up)
               {if_else
                  {==
                     [up_state]
                     1}
                  {set
                     [up_state]
                     2}
                  {if_else
                     {==
                        [up_state]
                        2}
                     {set
                        [up_state]
                        3}
                     {set
                        [up_state]
                        1}}})
            ((kAction_Right)
               {if_else
                  {==
                     [right_state]
                     1}
                  {set
                     [right_state]
                     2}
                  {if_else
                     {==
                        [right_state]
                        2}
                     {set
                        [right_state]
                        3}
                     {set
                        [right_state]
                        1}}})
            ((kAction_Down)
               {if_else
                  {==
                     [down_state]
                     1}
                  {set
                     [down_state]
                     2}
                  {if_else
                     {==
                        [down_state]
                        2}
                     {set
                        [down_state]
                        3}
                     {set
                        [down_state]
                        1}}})
            ((kAction_Left)
               {if_else
                  {==
                     [left_state]
                     1}
                  {set
                     [left_state]
                     2}
                  {if_else
                     {==
                        [left_state]
                        2}
                     {set
                        [left_state]
                        3}
                     {set
                        [left_state]
                        1}}})
            TRUE}
         {$this update}})}
{new
   HamScreen
   helpbar_test_screen
   (panels meta helpbar_test_panel)
   (focus helpbar_test_panel)
   (back story_hub_screen)}
#endif