(jump_index 0)
(jump_obj '')
(tan_destroyed FALSE)
(init
   {hamprovider set gameplay_mode rhythm_battle}
   {$this common_init}
   {master
      add_sink
      $this
      (stream_jump)}
   {resize
      [cached_loop_cams]
      0})
(reset
   {$this common_reset}
   {$hamdirector set_player_spotlights_enabled FALSE}
   {$hamdirector set freestyle_enabled FALSE}
   {$this change_camera_angle}
   {{{$hud_panel find rhythm_battle}
         find
         RhythmBattle.rhb}
      reset}
   {set
      [jump_obj]
      ""}
   {if
      {hamprovider get song_shortening_enabled}
      {{{$hamdirector get_world}
            find
            moves}
         iterate
         HamPartyJumpData
         $jd
         {set
            [jump_obj]
            $jd}}}
   {{{$hud_panel find rhythm_battle}
         find
         RhythmBattle.rhb}
      clear_jump}
   {audio jump 0}
   {{cursor_panel find depth_buffer_left.grp}
      set_showing
      FALSE}
   {{cursor_panel find depth_buffer_right.grp}
      set_showing
      FALSE}
   {{find_obj
         {$hamdirector get cur_world}
         show_timeywimey.flow}
      activate}
   {{find_obj
         {$hamdirector get cur_world}
         animate_timeywimey.flow}
      activate}
   {{{$hamdirector get_venue_world}
         find
         boxyman}
      set
      showing
      TRUE}
   {resize
      [cached_loop_cams]
      0}
   {game reset_detection}
   {set
      [jump_index]
      0}
   {$this stream_jump}
   {if
      {is_finale}
      {audio set_loop 16 112}
      {$hamdirector
         force_shot
         "bustamove.shot"}}
   {set
      $rhythmbattle_vo_ms
      {system_ms}}
   {boomy_count_in_player set active TRUE}
   {boomy_count_in_player clear_events})
(exit_mode
   {set
      [cached_loop_cams]
      {array 0}}
   {{{$hud_panel find rhythm_battle}
         find
         RhythmBattle.rhb}
      end}
   {hamprovider set rhythmbattle_jackedhelper FALSE}
   {hamprovider set rhythmbattle_trick1 ''}
   {hamprovider set rhythmbattle_trick2 ''})
(stream_jump
   {if
      {&&
         [jump_obj]
         {!
            {is_finale}}}
      {if_else
         {<
            [jump_index]
            {[jump_obj]
               size
               (jumps)}}
         {do
            ($from_measure
               {[jump_obj]
                  get
                  (jumps
                     [jump_index]
                     from_measure)})
            ($to_measure
               {[jump_obj]
                  get
                  (jumps
                     [jump_index]
                     to_measure)})
            {{{$hud_panel find rhythm_battle}
                  find
                  RhythmBattle.rhb}
               set_jump
               $from_measure
               $to_measure}
            {'++'
               [jump_index]}}
         {{{$hud_panel find rhythm_battle}
               find
               RhythmBattle.rhb}
            clear_jump}}})
(loop_cam_index 0)
(video_replay FALSE)
(cached_loop_cams
   ())
(video_replay_first_time FALSE)
(video_replay_loop_count 0)
(change_camera_angle
   {if
      {&&
         $hamdirector
         {!
            {is_finale}}}
      {do
         ($dir
            {$hamdirector get cur_world})
         ($picked
            "")
         ($cam_list
            ())
         {if_else
            {&&
               {<=
                  [loop_cam_index]
                  0}
               {!
                  [video_replay]}}
            {if
               $dir
               {$dir
                  iterate
                  HamCamShot
                  $shot
                  {if
                     {==
                        {$shot get category}
                        PRACTICE}
                     {set $picked $shot}}}}
            {do
               ($index
                  [loop_cam_index])
               ($cur_shot
                  {$hamdirector get cur_shot})
               {if
                  {&&
                     $dir
                     {!
                        {size
                           [cached_loop_cams]}}}
                  {$dir
                     iterate
                     HamCamShot
                     $shot
                     {if
                        {==
                           {$shot get category}
                           PRACTICE_LOOP}
                        {push_back
                           [cached_loop_cams]
                           $shot}}}
                  {sort
                     [cached_loop_cams]}}
               {cond
                  ({&&
                        $dir
                        [video_replay_first_time]}
                     {set
                        $picked
                        {find_obj
                           $dir
                           "practice_playback_first.shot"}})
                  ({&&
                        $dir
                        [video_replay]}
                     {if
                        {==
                           [video_replay_loop_count]
                           0}
                        {set
                           $picked
                           {find_obj
                              $dir
                              "practice_playback.shot"}}})
                  (TRUE
                     {-- $index}
                     {if
                        {size
                           [cached_loop_cams]}
                        {set
                           $index
                           {mod
                              $index
                              {size
                                 [cached_loop_cams]}}}
                        {set
                           $picked
                           {elem
                              [cached_loop_cams]
                              $index}}})}}}
         {if
            $picked
            {$hamdirector
               force_shot
               "bustamove.shot"}}
         {'++'
            [loop_cam_index]}}})
(finished_intro
   {$this change_camera_angle}
   {game swap_move_record}
   {game swap_move_record}
   {hamprovider set game_stage playing})
(end
   {game_panel set num_stars 5}
   {game_panel win}
   {hamprovider set game_stage outro}
   {{cursor_panel find depth_buffer_left.grp}
      set_showing
      TRUE}
   {{cursor_panel find depth_buffer_right.grp}
      set_showing
      TRUE})
(world_unpause
   {{cursor_panel find depth_buffer_left.grp}
      set_showing
      FALSE}
   {{cursor_panel find depth_buffer_right.grp}
      set_showing
      FALSE}
   {{{$hud_panel find rhythm_battle}
         find
         RhythmBattle.rhb}
      unpause}
   kDataUnhandled)
(world_pause
   {{cursor_panel find depth_buffer_left.grp}
      set_showing
      TRUE}
   {{cursor_panel find depth_buffer_right.grp}
      set_showing
      TRUE}
   {{{$hud_panel find rhythm_battle}
         find
         RhythmBattle.rhb}
      pause}
   kDataUnhandled)
(groove_passed
   ($player $rating $jacked $trick1 $trick2)
   {if
      {>
         {int
            {taskmgr beat}}
         0}
      {if
         {== $player 0}
         {game swap_move_record}}
      {hamprovider set rhythmbattle_jackedhelper FALSE}
      {hamprovider set rhythmbattle_trick1 $trick1}
      {hamprovider set rhythmbattle_trick2 $trick2}
      {$this hamprovider_export move_finished $player $rating 2.0e-2}
      {if
         {==
            {random_int 0 5}
            0}
         {$this change_camera_angle}}})
(pause_on_skeleton_loss
   {do
      ($cur_beat
         {int
            {taskmgr beat}})
      {> $cur_beat 4}})
(convert_beat
   ($beat $player)
   {$this convert_beat_common $beat $player})
(in_play_range
   ($b)
   {$this in_play_range_common $beat})
(can_pause
   {!
      [tan_destroyed]})
(num_rated_measures
   {$this num_rated_measures_common})
(rating_to_score
   ($groove $fresh)
   {if_else
      {> $groove 0.5}
      {'*'
         {round
            {'*'
               {clamp $fresh 0.0 1.0}
               16.0}}
         1900}
      0})
(bars_between_vo_suggestion 4)
(game_outro
   {$this game_outro_common})
#define RB_SOUNDS
(((can_steal
         (left rhy_battle_left_can_steal_01.snd rhy_battle_left_can_steal_02.snd)
         (right rhy_battle_right_can_steal_01.snd rhy_battle_right_can_steal_02.snd))
      (inzone
         (both rhy_battle_both_inzone_01.snd rhy_battle_both_inzone_02.snd rhy_battle_both_inzone_03.snd)
         (left rhy_battle_left_inzone_01.snd rhy_battle_left_inzone_02.snd)
         (right rhy_battle_right_inzone_01.snd rhy_battle_right_inzone_02.snd))
      (inzone_warning
         (both rhy_battle_both_inzone_warning_01.snd rhy_battle_both_inzone_warning_02.snd rhy_battle_both_inzone_warning_03.snd)
         (left rhy_battle_left_inzone_warning_01.snd rhy_battle_left_inzone_warning_02.snd)
         (right rhy_battle_right_inzone_warning_01.snd rhy_battle_right_inzone_warning_02.snd))
      (stole_congrats
         (left rhy_battle_left_stole_congrats_01.snd rhy_battle_left_stole_congrats_02.snd rhy_battle_left_stole_congrats_03.snd)
         (right rhy_battle_right_stole_congrats_01.snd rhy_battle_right_stole_congrats_02.snd rhy_battle_right_stole_congrats_03.snd))
      (almost_over
         (both rhy_battle_almost_over_both.snd rhy_battle_almost_over_both_02.snd rhy_battle_almost_over_both_03.snd)
         (left rhy_battle_almost_over_rightplayer.snd rhy_battle_almost_over_rightplayer_02.snd)
         (right rhy_battle_almost_over_leftplayer.snd rhy_battle_almost_over_leftplayer_02.snd))
      (getting_idea
         (both rhy_battle_getting_idea_both.snd rhy_battle_getting_idea_both_02.snd rhy_battle_getting_idea_both_03.snd)
         (left rhy_battle_getting_idea_leftplayer.snd rhy_battle_getting_idea_leftplayer_02.snd rhy_battle_getting_idea_leftplayer_03.snd)
         (right rhy_battle_getting_idea_rightplayer.snd rhy_battle_getting_idea_rightplayer_02.snd rhy_battle_getting_idea_rightplayer_03.snd))
      (groove_expired
         (both rhy_battle_groove_expired_both.snd rhy_battle_groove_expired_both_02.snd rhy_battle_groove_expired_both_03.snd)
         (left rhy_battle_groove_expired_leftplayer.snd rhy_battle_groove_expired_leftplayer_02.snd rhy_battle_groove_expired_leftplayer_03.snd)
         (right rhy_battle_groove_expired_rightplayer.snd rhy_battle_groove_expired_rightplayer_02.snd rhy_battle_groove_expired_rightplayer_03.snd))
      (halftime
         (both rhy_battle_halftime_both.snd rhy_battle_halftime_both_02.snd)
         (left rhy_battle_halftime_leftplayer.snd rhy_battle_halftime_leftplayer_02.snd)
         (right rhy_battle_halftime_rightplayer.snd rhy_battle_halftime_rightplayer_02.snd))
      (intro
         (both rhy_battle_intro_05.snd rhy_battle_intro_06.snd rhy_battle_intro_07.snd rhy_battle_intro_08.snd))
      (jack_swag
         (both rhy_battle_jack_swag_both.snd rhy_battle_jack_swag_both_02.snd rhy_battle_jack_swag_both_03.snd)
         (left rhy_battle_jack_swag_rightplayer.snd rhy_battle_jack_swag_rightplayer_02.snd rhy_battle_jack_swag_rightplayer_03.snd)
         (right rhy_battle_jack_swag_leftplayer.snd rhy_battle_jack_swag_leftplayer_02.snd rhy_battle_jack_swag_leftplayer_03.snd))
      (max_multiplier
         (both rhy_battle_max_multiplier_both.snd rhy_battle_max_multiplier_both_02.snd rhy_battle_max_multiplier_both_03.snd)
         (left rhy_battle_max_multiplier_leftplayer.snd rhy_battle_max_multiplier_leftplayer_02.snd rhy_battle_max_multiplier_leftplayer_03.snd)
         (right rhy_battle_max_multiplier_rightplayer.snd rhy_battle_max_multiplier_rightplayer_02.snd rhy_battle_max_multiplier_rightplayer_03.snd))
      (change_groove
         (both rhy_battle_need_groove_change_both.snd rhy_battle_need_groove_change_both_02.snd rhy_battle_need_groove_change_both_03.snd rhy_battle_need_groove_change_both_04.snd rhy_battle_need_groove_change_both_05.snd)
         (left rhy_battle_need_groove_change_leftplayer.snd rhy_battle_need_groove_change_leftplayer_02.snd rhy_battle_need_groove_change_leftplayer_03.snd rhy_battle_need_groove_change_leftplayer_04.snd rhy_battle_need_groove_change_leftplayer_05.snd)
         (right rhy_battle_need_groove_change_rightplayer.snd rhy_battle_need_groove_change_rightplayer_02.snd rhy_battle_need_groove_change_rightplayer_03.snd rhy_battle_need_groove_change_rightplayer_04.snd rhy_battle_need_groove_change_rightplayer_05.snd))
      (new_groove
         (both rhy_battle_new_groove_both.snd rhy_battle_new_groove_both_02.snd rhy_battle_new_groove_both_03.snd)
         (left rhy_battle_new_groove_leftplayer.snd rhy_battle_new_groove_leftplayer_02.snd rhy_battle_new_groove_leftplayer_03.snd)
         (right rhy_battle_new_groove_rightplayer.snd rhy_battle_new_groove_rightplayer_02.snd rhy_battle_new_groove_rightplayer_03.snd))
      (new_groove_working
         (both rhy_battle_new_groove_working_both.snd rhy_battle_new_groove_working_both_02.snd rhy_battle_new_groove_working_both_03.snd)
         (left rhy_battle_new_groove_working_leftplayer.snd rhy_battle_new_groove_working_leftplayer_02.snd rhy_battle_new_groove_working_leftplayer_03.snd)
         (right rhy_battle_new_groove_working_rightplayer.snd rhy_battle_new_groove_working_rightplayer_02.snd rhy_battle_new_groove_working_rightplayer_03.snd))
      (no_groove_yet
         (both rhy_battle_no_groove_yet_both.snd rhy_battle_no_groove_yet_both_02.snd rhy_battle_no_groove_yet_both_03.snd)
         (left rhy_battle_no_groove_yet_leftplayer.snd rhy_battle_no_groove_yet_leftplayer_02.snd rhy_battle_no_groove_yet_leftplayer_03.snd)
         (right rhy_battle_no_groove_yet_rightplayer.snd rhy_battle_no_groove_yet_rightplayer_02.snd rhy_battle_no_groove_yet_rightplayer_03.snd))
      (swag_jacked
         (left rhy_battle_swag_jacked_leftplayer.snd rhy_battle_swag_jacked_leftplayer_02.snd rhy_battle_swag_jacked_leftplayer_03.snd)
         (right rhy_battle_swag_jacked_rightplayer.snd rhy_battle_swag_jacked_rightplayer_02.snd rhy_battle_swag_jacked_rightplayer_03.snd))
      (trick_performed
         (left rhy_battle_trick_performed_leftplayer.snd rhy_battle_trick_performed_leftplayer_02.snd rhy_battle_trick_performed_leftplayer_03.snd)
         (right rhy_battle_trick_performed_02.snd rhy_battle_trick_performed_rightplayer_02.snd rhy_battle_trick_performed_rightplayer_03.snd))
      (trick_possible
         (left rhy_battle_trick_possible_leftplayer_01.snd rhy_battle_trick_possible_leftplayer_02.snd)
         (right rhy_battle_trick_possible_rightplayer_01.snd rhy_battle_trick_possible_rightplayer_02.snd))
      (winner
         (both rhy_battle_winner_both_01.snd rhy_battle_winner_both_02.snd rhy_battle_winner_both_03.snd rhy_battle_winner_both_04.snd rhy_battle_winner_both_05.snd rhy_battle_winner_both_06.snd)
         (left rhy_battle_winner_leftplayer.snd rhy_battle_winner_leftplayer_02.snd rhy_battle_winner_leftplayer_03.snd)
         (right rhy_battle_winner_rightplayer.snd rhy_battle_winner_rightplayer_02.snd rhy_battle_winner_rightplayer_03.snd))))
#define FINALE_SOUNDS
(((finale_intro_01 camp_gameplay_bust_intro_oblio_01.snd)
      (finale_intro_02 camp_gameplay_bust_intro_tan_01.snd)
      (finale_no_groove_yet oblio2_negative_04.snd oblio2_negative_05.snd)
      (finale_setcomplete_01 oblio2_plea_02.snd)
      (finale_phasein_01 tan2_taunt_13.snd)
      (finale_tandance_01 tan2_negative_10.snd)
      (finale_phaseout_01 camp_gameplay_bust_1move_oblio_02.snd)
      (finale_phaseout_01b camp_gameplay_bust_1move_tan_01.snd)
      (finale_setcomplete_02 camp_gameplay_bust_1move_oblio_01.snd)
      (finale_phasein_02 camp_gameplay_rhyjou2_tan_start_01.snd)
      (finale_tandance_02 camp_gameplay_rhyjou3_failure_tan_03.snd)
      (finale_phaseout_02 camp_gameplay_bust_1move_oblio_03.snd)
      (finale_phaseout_02b camp_gameplay_bust_1move_tan_03.snd)
      (finale_setcomplete_03 camp_gameplay_bust_1move_oblio_05.snd)
      (finale_phasein_03 camp_gameplay_bust_1move_tan_02.snd)
      (finale_tandance_03 camp_gameplay_bust_1move_tan_04.snd)
      (finale_phaseout_03 camp_gameplay_bust_1move_oblio_04.snd)
      (finale_phaseout_03b camp_gameplay_bust_1move_tan_05.snd)))
(play_sound
   ($sound)
   {do
      ($soundobj
         {{{$hud_panel find rhythm_battle}
               find
               rhythmbattle_audio}
            find
            $sound})
      {$soundobj play}})
(remaining_vo_ms
   {-
      {system_ms}
      $rhythmbattle_vo_ms})
(play_vo
   ($type $side)
   {do
      ($block
         {find RB_SOUNDS $type})
      ($sounds
         {find $block $side})
      ($len
         {size $sounds})
      ($soundname
         {elem
            $sounds
            {random_int 1 $len}})
      ($rhythmbattle_vo
         {{$hud_panel find sound_bank}
            find
            $soundname})
      {set
         $rhythmbattle_vo_ms
         {int
            {'+'
               {system_ms}
               {'*'
                  1000
                  {{$rhythmbattle_vo get sample}
                     sample_length}}}}}
      {$rhythmbattle_vo play}})
(play_finale_vo
   ($type)
   {do
      ($sounds
         {find FINALE_SOUNDS $type})
      ($len
         {size $sounds})
      ($soundname
         {elem
            $sounds
            {random_int 1 $len}})
      ($rhythmbattle_vo
         {{$hud_panel find sound_bank}
            find
            $soundname})
      {if_else
         $rhythmbattle_vo
         {do
            {$rhythmbattle_vo play}
            {set
               $rhythmbattle_vo_ms
               {int
                  {'+'
                     {system_ms}
                     {'*'
                        1000
                        {{$rhythmbattle_vo get sample}
                           sample_length}}}}}}
         {do
            ($tan_vo_bank
               {{$hamwardrobe get_character $i}
                  get
                  vo_bank})
            ($tan_lipsync_vo
               {$tan_vo_bank find $soundname})
            {if
               $tan_lipsync_vo
               {$tan_vo_bank play_lipsync_sound $tan_lipsync_vo}
               {set
                  $rhythmbattle_vo_ms
                  {int
                     {'+'
                        {system_ms}
                        {'*'
                           1000
                           {{$tan_lipsync_vo get sample}
                              sample_length}}}}}}}}})
(play_1x
   {$this play_sound 1x_multi.snd})
(play_2x
   {$this play_sound 2x_multi.snd})
(play_3x
   {$this play_sound 3x_multi.snd})
(play_4x
   {$this play_sound 4x_multi.snd})
(game_outro_finale
   {$this game_outro_common}
   {game_panel win})
(count_in
   ($start $end)
   {boomy_count_in_player set_section $start $end})