#define SONG_BUFFER_TIME
(1.4)
#define GAME_LOAD_HANDLERS
((load
      {set_loader_period 14})
   (finish_load
      {set_loader_period 10}
      {voice_input_panel activate_voice_context ''})
   (unload
      {set
         $hud_panel
         ""}
      {if
         {exists speech_mgr}
         {speech_mgr remove_sink $this}}))
#define COMMON_GAME_HANDLERS
((score 0)
   (star_points 0)
   (num_stars 0)
   (hide_helpbar TRUE)
   (hide_letterbox TRUE)
   (is_gameplay_panel TRUE)
   (song_bpm -1)
   (common_init
      {if
         $hamdirector
         {$hamdirector set practice_start ''}
         {$hamdirector set practice_end ''}}
      {if
         {exists dance_battle_mini_game}
         {delete dance_battle_mini_game}}
      {if
         {exists choose_move_mini_game}
         {delete choose_move_mini_game}}
      {if
         {exists name_that_dance_mini_game}
         {delete name_that_dance_mini_game}}
      {if
         {exists cascade_mini_game}
         {delete cascade_mini_game}}
      {if
         {exists concentration_mini_game}
         {delete concentration_mini_game}}
      {if
         {exists holla_back_mini_game}
         {delete holla_back_mini_game}}
      {bustamove_panel
         set_showing
         {==
            {gamemode get gameplay_mode}
            bustamove}}
      {bustamove_visualizer_panel
         set_showing
         {==
            {gamemode get gameplay_mode}
            bustamove}}
      {meta_performer game_init}
      {if_else
         {&&
            {==
               $just_practiced_song
               {gamedata get song}}
            {exists gamemode}
            {==
               {hamprovider get gameplay_mode}
               perform}}
         {set $can_earn_practice_acc_this_time TRUE}
         {set $can_earn_practice_acc_this_time FALSE}}
      {set $just_practiced_song ''})
   (common_reset
      {print
         "common_reset. {hamprovider get gameplay_mode} = "
         {hamprovider get gameplay_mode}
         "\n"}
      {set
         [num_stars]
         0}
      {active_events_parser
         add_sink
         $this
         ()
         kSinkModeExportType}
      {platform_mgr
         add_sink
         $this
         (ui_changed)}
      {hamprovider set hide_venue FALSE}
      {hamprovider set visible_flashcard_btm -1}
      {hamprovider set visible_flashcard_top -1}
      {$hamdirector enable_poll TRUE}
      {hamprovider set skipped_song FALSE}
      {if
         $hud_panel
         {$hud_panel reset}
         {if
            {!=
               {hamprovider get gameplay_mode}
               mind_control}
            {$hud_panel
               set_score
               [score]
               [score]
               0
               1}
            {$hud_panel
               set_score
               [score]
               [score]
               0
               2}}
         {$hud_panel set_num_photos 1}
         {$hud_panel set_slow FALSE FALSE}
         {do
            ($b
               {$hud_panel find sound_bank})
            {if
               {&&
                  $b
                  {$b find music_level.fade}}
               {{$b find music_level.fade}
                  set
                  level
                  0}}}}
      {if
         $hamdirector
         {$hamdirector set player_freestyle FALSE}
         {$hamdirector blend_face_overrides_out 0}
         {handle
            (hamprovider start)}
         {{$hamdirector get_world}
            set
            explicit_postproc
            TRUE}}
      {foreach_int
         $i
         0
         {gamedata max_players}
         {do
            ($provider
               {gamedata getp $i provider})
            {$provider
               set
               start_score_move_index
               {if_else
                  {gamedata getp $i playing}
                  0
                  1000}}
            {$provider set final_pose_rating ''}
            {$provider set num_perfect 0}
            {$provider set num_awesome 0}
            {$provider set num_gold 0}}}
      {audio clear_loop}
      {audio set_track_volume multi -96}
      {count_in_player reset}
      {slow_count_in_player reset}
      {action_bark_player set_active FALSE}
      {photo_taker clear_events}
      {$hud_panel reset_snapshots}
      {do
         ($song
            {gamedata get song})
         ($data
            {song_mgr get_meta_data $song})
         ($song_name
            {find_obj $hud_panel song_name.lbl})
         ($song_artist
            {find_obj $hud_panel song_artist.lbl})
         ($song_title
            {cond
               ({==
                     {hamprovider get gameplay_mode}
                     mind_control}
                  blank)
               (TRUE $song)})
         {if
            {&& $song_name $song_artist}
            {$song_name set_song_name $song_title}
            {$song_artist set_artist_name $song}}
         {set
            [song_bpm]
            {$data bpm}}
         {hamprovider
            set
            dynamic_difficulty_enabled
            {cond
               ({hamprovider get is_in_infinite_party_mode}
                  TRUE)
               ($force_dynamic_difficulty TRUE)
               FALSE}}
         {hamprovider
            set
            song_shortening_enabled
            {cond
               ({&&
                     {hamprovider get is_in_infinite_party_mode}
                     {!
                        {partymode_mgr is_using_full_length_songs}}}
                  TRUE)
               ({&&
                     {hamprovider get is_in_party_mode}
                     {!
                        {partymode_mgr is_using_full_length_songs}}
                     {!
                        {partymode_mgr is_showdown}}}
                  TRUE)
               ({&&
                     {hamprovider get is_in_campaign_mode}
                     {==
                        {meta_performer get_era}
                        {meta_performer tan_battle_era}}}
                  {campaign
                     get_outro_song_shortened
                     {meta_performer get_playlist_index}})
               ($force_song_shortening TRUE)
               FALSE}}
         {$hamdirector
            set
            freestyle_enabled
            {cond
               ({&&
                     {gamemode in_mode perform}
                     {hamprovider get song_shortening_enabled}}
                  FALSE)
               ({find_elem
                     (ham1 ham1_dlc)
                     {$data game_origin}}
                  TRUE)
               ({&&
                     {hamprovider get is_in_campaign_mode}
                     {==
                        {meta_performer get_era}
                        {meta_performer tan_battle_era}}}
                  {campaign
                     get_outro_song_freestyle_enabled
                     {meta_performer get_playlist_index}})
               ({gamemode in_mode campaign}
                  FALSE)
               ($force_freestyle_disabled FALSE)
               ({exists profile_mgr}
                  {!
                     {profile_mgr get_disable_freestyle}})
               TRUE}}}
      {handle
         (hamprovider
            setup_0_alert
            none
            "")}
      {handle
         (hamprovider
            setup_1_alert
            none
            "")}
      {meta_performer game_reset}
      {gameplay_event_scheduler reset}
      {if
         {$hud_panel exists practice_options}
         {{find_obj $hud_panel practice_options}
            stop_recording}}
      {{find_obj
            {$hamdirector get_venue_world}
            video_recorder.srec}
         reset}
      {{find_obj
            {$hamdirector get_venue_world}
            video_recorder.srec}
         set
         input
         {ui get_augmented_photo}})
   (hamprovider_export
      ($handler $param1 $param2 $delay)
      {if_else
         {<= $delay 0}
         {handle
            (hamprovider $handler $param1 $param2)}
         {script_task
            kTaskSeconds
            (delay $delay)
            (script
               {handle
                  (hamprovider $handler $param1 $param2)})}})
   (pick_intro
      {if
         {!=
            mind_control
            {hamprovider get gameplay_mode}}
         {hamprovider set game_stage intro}}
      {game_screen set_showing TRUE}
      {handle
         (game_panel on_intro_start)}
      {if
         {&&
            {!=
               {hamprovider get gameplay_mode}
               holla_back}
            {!=
               mind_control
               {hamprovider get gameplay_mode}}}
         {$this reset}}
      {if
         {'||'
            $skip_intro
            {==
               mind_control
               {gamemode get gameplay_mode}}}
         {hamprovider set game_stage playing}})
   (intro_over
      {if
         {!
            {gamemode in_mode rhythm_battle}}
         {hamprovider set game_stage playing}}
      {if
         {&&
            {exists speech_mgr}
            {!
               {gamemode in_mode practice}}}
         {speech_mgr set_rule pause_rule boombox_pause TRUE}})
   (excitement
      ($ex)
      {if
         {gamemode get crowd_reacts}
         {do
            ($levels
               (excitement_boot excitement_bad excitement_okay excitement_great excitement_peak))
            {if
               {< $ex kNumExcitements}
               {handle
                  ($this
                     {elem $levels $ex})}}}}
      kDataUnhandled)
   (game_won_common
      {print
         "************ game_won_common was most certainly called!!!!! ************\n"}
      {if
         {!
            {$pose_fatalities fatal_active}}
         {do
            {print
               "hamprovider setting game_stage from "
               {hamprovider get game_stage}
               " to outro\n"}
            {hamprovider set game_stage outro}
            {game set_realtime TRUE}
            {game set_paused TRUE FALSE}}})
   (game_won
      {$this game_won_common}
      kDataUnhandled)
   (game_outro_common
      {if
         {songseq do_next FALSE}
         {if_else
            {==
               {ui bottom_screen}
               {ui current_screen}}
            {goto_win_screen TRUE}
            {goto_win_screen FALSE}}}
      {if
         {exists speech_mgr}
         {speech_mgr set_rule pause_rule boombox_pause FALSE}})
   (disable_all_controllers)
   (UI_CHANGED_MSG
      {if
         {&&
            {platform_mgr guide_showing}
            {!
               {$this paused}}}
         {$this pause_game}})
   (BUTTON_DOWN_MSG
      {if
         {== $action kAction_Start}
         {$this pause_game}})
   (SPEECH_RECO_MSG
      {if
         {!
            {profile_mgr get_disable_voice_pause}}
         {if
            {>=
               $confidence
               {speech_mgr get_confidence_threshold}}
            {if_else
               {<
                  {size $tags}
                  1}
               {do
                  {notify
                     "No semantic tags in speech reco msg!"}}
               {do
                  {switch
                     {elem $tags 0}
                     (pause
                        {if
                           {>= $confidence 0.5}
                           {pause_panel set blacklight_on_enter TRUE}
                           {$this pause_game}
                           {meta_performer send_speech_datapoint $tags $confidence $rule_name}})}}}}})
   (pause_game
      {if
         {&&
            {!
               {game_panel is_game_over}}
            {game_panel can_pause}}
         {cond
            ({hamprovider get is_in_party_mode}
               {set $pause_screen_to_use party_mode_pause_screen})
            ({hamprovider get is_in_infinite_party_mode}
               {set $pause_screen_to_use infinite_party_mode_pause_screen})
            (TRUE
               {set
                  $pause_screen_to_use
                  {gamemode get pause_screen}})}
         {pause_panel set back_token natal_guide}
         {if_else
            {==
               {ui bottom_screen}
               {ui current_screen}}
            {ui push_screen $pause_screen_to_use}
            {ui goto_screen $pause_screen_to_use}}})
   (freestyle_start_beat
      {if_else
         {&&
            {$hud_panel get moves_dir}
            {hamprovider get is_in_campaign_mode}
            {meta_performer in_outro_perform}}
         {do
            ($finishing_move_beat
               {'*'
                  4
                  {{$hud_panel get moves_dir}
                     get_finishing_move_measure}})
            ($freebeat
               {-
                  $finishing_move_beat
                  {'*' 8 4}})
            {assert
               {!= $freebeat kDataUnhandled}}
            $freebeat}
         {do
            ($freebeat
               {master event_beat freestyle_start})
            {assert
               {!= $freebeat kDataUnhandled}}
            {'*'
               4
               {round
                  {/ $freebeat 4}}}}})
   (freestyle_end_beat
      {if_else
         {&&
            {hamprovider get is_in_campaign_mode}
            {meta_performer in_outro_perform}}
         {do
            ($finishing_move_beat
               {'*'
                  4
                  {{$hud_panel get moves_dir}
                     get_finishing_move_measure}})
            ($freebeat
               {'+'
                  4
                  $finishing_move_beat
                  {'*' 2 4}})
            {assert
               {!= $freebeat kDataUnhandled}}
            $freebeat}
         {do
            ($freebeat
               {master event_beat freestyle_end})
            {assert
               {!= $freebeat kDataUnhandled}}
            $freebeat}})
   (set_performance_state_index
      ($player_index $state_index $force)
      {do
         ($player_provider
            {gamedata getp $player_index provider})
         ($old_state_index
            {$player_provider get performance_index})
         ($old_multiplier 0)
         ($multiplier 0)
         ($old_performance_state '')
         ($performance_state '')
         {set
            $state_index
            {max
               {min
                  $state_index
                  {-
                     {size
                        [performance_state_chart]}
                     1}}
               0}}
         {$player_provider set performance_index $state_index}
         {set
            $performance_state
            {elem
               {elem
                  [performance_state_chart]
                  $state_index}
               0}}
         {$player_provider set performance_state $performance_state}
         {set
            $old_multiplier
            {$player_provider get score_multiplier}}
         {set
            $multiplier
            {elem
               {elem
                  [performance_state_chart]
                  $state_index}
               1}}
         {if
            {!= $old_multiplier $multiplier}
            {$player_provider set score_multiplier $multiplier}
            {switch
               $multiplier
               (1
                  {handle
                     ($player_provider peak_stop)})
               {handle
                  ($player_provider peak_start)}}}})
   (next_performance_state_index
      ($rating_idx $cur_index)
      {if_else
         {< $cur_index 0}
         [initial_performance_state_index]
         {do
            ($delta
               {elem
                  {elem
                     [performance_state_chart]
                     $cur_index}
                  {'+' $rating_idx 2}})
            {'+' $delta $cur_index}}})
   (last_performance_state_index
      {-
         {size
            [performance_state_chart]}
         1})
   (calculate_stars
      ($star_points)
      {do
         ($stars 0)
         ($threshold 0)
         ($last_threshold 0)
         ($done FALSE)
         {foreach_int
            $i
            0
            {size
               [star_thresholds]}
            {set
               $threshold
               {elem
                  [star_thresholds]
                  $i}}
            {if
               {! $done}
               {if_else
                  {> $star_points $threshold}
                  {'+=' $stars 1}
                  {do
                     {'+='
                        $stars
                        {/
                           {- $star_points $last_threshold}
                           {- $threshold $last_threshold}}}
                     {set $done TRUE}}}
               {set $last_threshold $threshold}}}
         $stars})
   (on_marker_event
      ($label)
      {switch
         $label
         (speech_disable
            {if
               {exists speech_mgr}
               {speech_mgr set_recognizing FALSE}})
         (speech_enable
            {if
               {exists speech_mgr}
               {speech_mgr set_recognizing TRUE}})})
   (convert_beat_common
      ($beat $player)
      $beat)
   (convert_beat_common_looped
      ($beat $player)
      {do
         ($loop_set FALSE)
         ($start_beat 0)
         ($end_beat 0)
         {set
            $loop_set
            {audio get_loop_beats $start_beat $end_beat}}
         {if
            {&&
               $loop_set
               {>= $beat $end_beat}}
            {-=
               $beat
               {- $end_beat $start_beat}}}}
      $beat)
   (in_play_range_common
      ($beat)
      TRUE)
   (num_rated_measures_common -1))
#define FINAL_POSE_HANDLERS
((on_final_pose_photo
      {gesture_mgr start_snapshot_batch}
      {$hud_panel take_snapshot}))
(GamePanel
   (description
      "Main game mode panel for Hammer")
   (allowed_dirs)
   (types
      (none
         GAME_LOAD_HANDLERS
         (convert_beat
            ($b $p)
            {$this convert_beat_common $b $p})
         (in_play_range
            ($beat)
            {$this in_play_range_common $beat})
         (can_pause TRUE)
         (num_rated_measures
            {$this num_rated_measures_common}))
      (perform
         COMMON_GAME_HANDLERS
         #include perform.dta)
      (perform_legacy
         COMMON_GAME_HANDLERS
         #include perform_legacy.dta)
      (practice
         COMMON_GAME_HANDLERS
         #include practice_tweakables.dta
         #include practice.dta)
      (dance_battle
         COMMON_GAME_HANDLERS
         #include dance_battle.dta)
      (mind_control
         COMMON_GAME_HANDLERS
         #include mind_control.dta)
      (just_intro
         COMMON_GAME_HANDLERS
         #include just_intro.dta)
      (routine_builder
         COMMON_GAME_HANDLERS
         #include routine_builder.dta)
      (name_that_dance
         COMMON_GAME_HANDLERS
         #include name_that_dance.dta)
      (concentration
         COMMON_GAME_HANDLERS
         #include concentration.dta)
      (rhythm_battle
         COMMON_GAME_HANDLERS
         #include rhythm_battle.dta)
      (holla_back
         COMMON_GAME_HANDLERS
         #include holla_back.dta)
      (bustamove
         COMMON_GAME_HANDLERS
         #include bustamove_mode.dta)
      (strike_a_pose
         COMMON_GAME_HANDLERS
         #include strike_a_pose.dta)))